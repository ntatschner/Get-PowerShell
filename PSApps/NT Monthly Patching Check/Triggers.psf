<File version="3.1">
  <FileID>d65bf741-60b6-4cc9-9dff-959781e4881f</FileID>
  <Preview>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
Xgtnzw7Y6w4SMkrNMsy6Tc20y4i/V/ri2oGFa+bs9XK2HQn3ytU0OKus/NI3CwD9D5+pxhTU2u4J
1fc+VJ15rLOP9sYERltsnb/Ni1RnGvny0Rk/6fztzOc8tzBucT7HF+Od5bwYtzjfwjoXhpeuc2F9
i8tZbNfi/Ha+F8tGRET8B2zonzTFu0MpOTWq6xpXlSnOVW3Dzml5W5gbeqeMky+ttmfM7XgzXaUt
5Gb4dkalOUjucAJAy9CsGvsmHZv6p9Q+/FgdI/PGhcd282ifX5ymsW/KuYlPXmWzORhucYKIbUel
WW5l62I7Jp1aac8U2DbZv+3zdrydzhluGVJ8eplazfqyHrxhABic/GGhsCIiIq4xbVGvNQX3rim8
iZn2+/TVb2GNOequVHZZh7OsvKpW5ZY3OUfzb6P99kBJY5/TjuScul/QjmonhORWdKpr/JmyH5S9
SQDwyxic/sEkC5NwTAppMGkEPyCXpFJERHx77ZG1rX9NA9PO4y/x1bzTzvLeXntGYNo5G9DY/4+1
o3Ps6ZsFgAMHDmc8fCyNT85oeOyhRsZ/maPjkyvm2MTU2vXh9Ipq3zcr5cTU2vXh1OyKOjk9t3LO
PFrTTs0+XjGn51bOmbn59++jf8B3sRwP888+evLGzj1+qrlnP+j+m1wDsN8EgOl5aW7W7FQeTmhy
8uEvcmpqcsWcnp5as87MTK+o9n2zUj6am12zPn40t6LOP360Yj6Zf7ymffpkfsV89vTJivn82dM1
6w/Pn7+x+uEHmf+/eQCYMgFgZsYcWUxMmBDw8DXtc9Ozj8zizHJNQ+ZM55+bNTsh0xGnTOFfnG5y
cnLFnJqaWrNOT0+vqPZ9s1LOmvfhWnVuzvTDFfTRo0cr5uPHj9e08/PzK+aTJ09WzKdPn65Znz17
9sbaEPDsXQWAabOz6Wup0KXz53XxRqLKSspVXVuv6pJKDYxNasYUAXsU7q4we0t3hXGt6K4oe9Pl
RdmbuiuMa0V3RdmbuivM3tJdUVxLuivM3tJdYfaW7grjWtFdoffkOw0A5mVX1sUgbdh8QqUNTWpu
bFV7c6EOfrVbtSPzmpkY1vDIhGZnpvXQTXH2hu4K41rRXVH2psuLsjd1VxjXiu6Ksjd1V5i9pbui
uJZ0V5i9pbvC7C3dFca1ortC78l3GgDmf3iq/Csh+nzdHiXnFCgv6Y7ir9/Qif2hKigp0P4vPtfX
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[param (
	$ComputerName
)
$triggers_Load = {
	
	$TriggerHash = "Hardware Inventory {00000000-0000-0000-0000-000000000001}",
	"Software Inventory {00000000-0000-0000-0000-000000000002}",
	"Discovery Inventory {00000000-0000-0000-0000-000000000003}",
	"File Collection {00000000-0000-0000-0000-000000000010}",
	"IDMIF Collection {00000000-0000-0000-0000-000000000011}",
	"Client Machine Authentication {00000000-0000-0000-0000-000000000012}",
	"Request Machine Assignments {00000000-0000-0000-0000-000000000021}",
	"Evaluate Machine Policies {00000000-0000-0000-0000-000000000022}",
	"Refresh Default MP Task {00000000-0000-0000-0000-000000000023}",
	"LS (Location Service) Refresh Locations Task {00000000-0000-0000-0000-000000000024}",
	"LS (Location Service) Timeout Refresh Task {00000000-0000-0000-0000-000000000025}",
	"Policy Agent Request Assignment (User) {00000000-0000-0000-0000-000000000026}",
	"Policy Agent Evaluate Assignment (User) {00000000-0000-0000-0000-000000000027}",
	"Software Metering Generating Usage Report {00000000-0000-0000-0000-000000000031}",
	"Source Update Message {00000000-0000-0000-0000-000000000032}",
	"Clearing proxy settings cache {00000000-0000-0000-0000-000000000037}",
	"Machine Policy Agent Cleanup {00000000-0000-0000-0000-000000000040}",
	"User Policy Agent Cleanup {00000000-0000-0000-0000-000000000041}",
	"Policy Agent Validate Machine Policy / Assignment {00000000-0000-0000-0000-000000000042}",
	"Policy Agent Validate User Policy / Assignment {00000000-0000-0000-0000-000000000043}",
	"Retrying/Refreshing certificates in AD on MP {00000000-0000-0000-0000-000000000051}",
	"Peer DP Status reporting {00000000-0000-0000-0000-000000000061}",
	"Peer DP Pending package check schedule {00000000-0000-0000-0000-000000000062}",
	"SUM Updates install schedule {00000000-0000-0000-0000-000000000063}",
	"NAP action {00000000-0000-0000-0000-000000000071}",
	"Hardware Inventory Collection Cycle {00000000-0000-0000-0000-000000000101}",
	"Software Inventory Collection Cycle {00000000-0000-0000-0000-000000000102}",
	"Discovery Data Collection Cycle {00000000-0000-0000-0000-000000000103}",
	"File Collection Cycle {00000000-0000-0000-0000-000000000104}",
	"IDMIF Collection Cycle {00000000-0000-0000-0000-000000000105}",
	"Software Metering Usage Report Cycle {00000000-0000-0000-0000-000000000106}",
	"Windows Installer Source List Update Cycle {00000000-0000-0000-0000-000000000107}",
	"Software Updates Assignments Evaluation Cycle {00000000-0000-0000-0000-000000000108}",
	"Branch Distribution Point Maintenance Task {00000000-0000-0000-0000-000000000109}",
	"DCM policy {00000000-0000-0000-0000-000000000110}",
	"Send Unsent State Message {00000000-0000-0000-0000-000000000111}",
	"State System policy cache cleanout {00000000-0000-0000-0000-000000000112}",
	"Scan by Update Source {00000000-0000-0000-0000-000000000113}",
	"Update Store Policy {00000000-0000-0000-0000-000000000114}",
	"State system policy bulk send high {00000000-0000-0000-0000-000000000115}",
	"State system policy bulk send low {00000000-0000-0000-0000-000000000116}",
	"AMT Status Check Policy {00000000-0000-0000-0000-000000000120}",
	"Application manager policy action {00000000-0000-0000-0000-000000000121}",
	"Application manager user policy action {00000000-0000-0000-0000-000000000122}",
	"Application manager global evaluation action {00000000-0000-0000-0000-000000000123}",
	"Power management start summarizer {00000000-0000-0000-0000-000000000131}",
	"Endpoint deployment reevaluate {00000000-0000-0000-0000-000000000221}",
	"Endpoint AM policy reevaluate {00000000-0000-0000-0000-000000000222}",
	"External event detection {00000000-0000-0000-0000-000000000223}"
	foreach ($a in $TriggerHash)
	{
		Update-ListBox -ListBox $checkedlistbox1 -Items $a -Append
	}
	
	$Global:SoftwareUpdatesManagerClassObject = [wmiclass]$(Join-Path -Path "\\$($ComputerName)" -ChildPath "\root\ccm\clientsdk:CCM_SoftwareUpdatesManager")
	$Global:ApplicationClassObject = [wmiclass]$(Join-Path -Path "\\$($ComputerName)" -ChildPath "\root\ccm\clientsdk:CCM_Application")
	$ColumnNames = "Name", "Status", "ArticleID", "MaxExecutionTime", "StartTime", "PercentComplete", "RebootOutsideServiceWindow", "Deadline", "RestartDeadline"
	$Column = New-Object System.Windows.Forms.DataGridviewColumn
	foreach ($b in $ColumnNames)
	{
		$datagridview2.Columns.Add($b, $b)
	}
}

$trigger_button_test_Click = {
	if (Test-Connection -Quiet -ComputerName $ComputerName)
	{
		$ErrorCount = 0
		$TotalChecked = $checkedlistbox1.CheckedItems.Count
		for ($a = 0; $a -lt $checkedlistbox1.Items.Count; $a++)
		{
			$RowContent = $checkedlistbox1.Items[$a]
			if ($checkedlistbox1.CheckedIndices.Contains($a))
			{
				try
				{
					$Result = Invoke-WMIMethod -Class SMS_CLIENT -Namespace root\ccm -ComputerName $ComputerName -Name TriggerSchedule $('{' + $RowContent.Split('{')[1]) -ErrorAction Stop
					$toolstripstatuslabel1.Text = "Triggered " + $RowContent.Split('{')[0]
					Start-Sleep -Milliseconds 500
				}
				catch
				{
					$toolstripstatuslabel1.Text = "Failed to trigger $($RowContent.Split('{')[0]) : $($_.Exception.Message)"
					$checkedlistbox1.SetItemChecked($a, $false)
					$ErrorCount++
					Start-Sleep -Milliseconds 500
				}
			}
		}
		$toolstripstatuslabel1.Text = "Out of $($TotalChecked) checked items, $($TotalChecked - [int32]$ErrorCount) were triggered succefully and $($ErrorCount) failed and were unchecked."
	}
	else
	{
		$toolstripstatuslabel1.Text = "Could not connect to $ComputerName"
	}
}

#region Control Helper Functions

Function Trigger-AppInstallation
{
	
	Param
	(
		[String][Parameter(Mandatory = $True, Position = 1)]
		$Computer,
		[String][Parameter(Mandatory = $True, Position = 2)]
		$AppName,
		[ValidateSet("Install", "Uninstall")]
		[String][Parameter(Mandatory = $True, Position = 3)]
		$Method
	)
	
	Begin
	{
		$Application = (Get-CimInstance -ClassName CCM_Application -Namespace "root\ccm\clientSDK" -ComputerName $Computer | Where-Object { $_.Name -like $AppName })
		
		$Args = @{
			EnforcePreference = [UINT32] 0
			Id			      = "$($Application.id)"
			IsMachineTarget   = $Application.IsMachineTarget
			IsRebootIfNeeded  = $False
			Priority		  = 'High'
			Revision		  = "$($Application.Revision)"
		}
		
	}
	
	Process
	{
		
		$return = Invoke-CimMethod -Namespace "root\ccm\clientSDK" -ClassName CCM_Application -ComputerName $Computer -MethodName $Method -Arguments $Args
		return $return
		
	}
	
	End { }
	
}
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion

$buttonSelectAll_Click = {
	for ($a = 0; $a -lt $checkedlistbox1.Items.Count; $a++)
	{
		$checkedlistbox1.SetItemChecked($a, $true)
	}
}

$buttonClearSelection_Click = {
	for ($a = 0; $a -lt $checkedlistbox1.Items.Count; $a++)
	{
		$checkedlistbox1.SetItemChecked($a, $false)
	}
}

$buttonOpenLogFolder_Click = {
	if (Test-Path -Path "\\$($ComputerName)\c$\Windows\CCM\Logs\")
	{
		Start-Process explorer.exe "\\$($ComputerName)\c$\Windows\CCM\Logs\"
	}
	else
	{
		$toolstripstatuslabel1.Text = "Could not connect to $("\\$($ComputerName)\c$\Windows\CCM\Logs\")"
	}
}

$buttonAppGet_Click = {
	try
	{
		$AllApps = Get-WmiObject -ComputerName $ComputerName -Class CCM_Application -Namespace Root\ccm\ClientSDK -ErrorAction Stop
		if ([System.String]::IsNullOrEmpty($AllApps) -eq $false)
		{
			Update-DataGridView -DataGridView $datagridview1 -AutoSizeColumns AllCells -Item $($AllApps | select FullName, ApplicabilityState, ConfigureState, installState, isMachineTarget, LastEvalTime, LastInstallTime, PercentComplete, Publisher, ResolvedState, SoftwareVersion, StartTime, UserUIExperience)
			$toolstripstatuslabel1.Text = "Loaded"
		}
		else
		{
			$toolstripstatuslabel1.Text = "No deployed apps found"
		}
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$toolstripstatuslabel1.Text = "Error getting Apps from $ComputerName."
	}
	
}

$buttonUpdateGet_Click = {
	$Global:EvaluationList = @{
		0 = "ciJobStateNone";
		1 = "ciJobStateAvailable";
		2 = "ciJobStateSubmitted";
		3 = "ciJobStateDetecting";
		4 = "ciJobStatePreDownload";
		5 = "ciJobStateDownloading";
		6 = "ciJobStateWaitInstall";
		7 = "ciJobStateInstalling";
		8 = "ciJobStatePendingSoftReboot";
		9 = "ciJobStatePendingHardReboot";
		10 = "ciJobStateWaitReboot";
		11 = "ciJobStateVerifying";
		12 = "ciJobStateInstallComplete";
		13 = "ciJobStateError";
		14 = "ciJobStateWaitServiceWindow";
		15 = "ciJobStateWaitUserLogon";
		16 = "ciJobStateWaitUserLogoff";
		17 = "ciJobStateWaitJobUserLogon";
		18 = "ciJobStateWaitUserReconnect";
		19 = "ciJobStatePendingUserLogoff";
		20 = "ciJobStatePendingUpdate";
		21 = "ciJobStateWaitingRetry";
		22 = "ciJobStateWaitPresModeOff";
		23 = "ciJobStateWaitForOrchestration"
	}
	$datagridview2.Rows.Clear()
	try
	{
		$AllUpdates = Get-WmiObject -ComputerName $ComputerName -Class CCM_SoftwareUpdate -Namespace Root\ccm\ClientSDK -ErrorAction Stop
		if ([System.String]::IsNullOrEmpty($AllUpdates) -eq $false)
		{
			$List = New-Object System.Collections.ArrayList

			foreach ($a in $AllUpdates)
			{
				$Eval = $EvaluationList[[int]$a.EvaluationState]
				$datagridview2.Rows.Add($a.Name, $Eval, $a.ArticleID, $a.MaxExecutionTime, $(if ([String]::IsNullOrEmpty($a.StartTime) -eq $false) { [System.Management.ManagementDateTimeConverter]::ToDateTime($a.StartTime) }), $a.PercentComplete, $a.RebootOutsideServiceWindow, $(if ([String]::IsNullOrEmpty($a.Deadline) -eq $false) { [System.Management.ManagementDateTimeConverter]::ToDateTime($a.Deadline) }), $(if ([String]::IsNullOrEmpty($a.RestartDeadline) -eq $false) { [System.Management.ManagementDateTimeConverter]::ToDateTime($a.RestartDeadline) }))
			}
			
			$toolstripstatuslabel1.Text = "Loaded"
		}
		else
		{
			$toolstripstatuslabel1.Text = "No deployed updates found"
		}
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$toolstripstatuslabel1.Text = "Error getting Updates from $ComputerName. Error: $($_.Exception.Message)"
	}
	
}

$buttonGPUpdate_Click = {
	$toolstripstatuslabel1.Text = "Triggering GPUpdate on remote computer"
	try
	{
		Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList "gpupdate.exe" -ComputerName $ComputerName -ErrorAction Stop
		$toolstripstatuslabel1.Text = "Triggered GPUpdate on remote computer"
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$toolstripstatuslabel1.Text = "Failed to trigger GPUpdate on $($ComputerName)"
	}
	
}

$buttonApplicationInstall_Click = {
	
	try
	{
		Trigger-AppInstallation -Computer $ComputerName -AppName $($datagridview1.SelectedRows[0].Cells[0].Value.ToString()) -Method Install -ErrorAction Stop
		$toolstripstatuslabel1.Text = "Installation of $($datagridview1.SelectedRows[0].Cells[0].Value.ToString()) triggered succesfully."
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$toolstripstatuslabel1.Text = "Failed to install"
	}
}

$buttonapplicationUninstall_Click = {
	try
	{
		Trigger-AppInstallation -Computer $ComputerName -AppName $($datagridview1.SelectedRows[0].Cells[0].Value.ToString()) -Method Uninstall -ErrorAction Stop
		$toolstripstatuslabel1.Text = "Uninstall of $($datagridview1.SelectedRows[0].Cells[0].Value.ToString()) triggered succesfully."
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$toolstripstatuslabel1.Text = "Failed to uninstall"
	}
}

$buttonProcesses_Click = {
	
	Show-Processes_psf -ComputerName $ComputerName
	
}

$buttonServices_Click = {
	
	Show-Services_psf -ComputerName $ComputerName
}

$buttonRestartAgent_Click = {
	
	$StopCount = 0
	$StartCount = 0
	$StopBreak = $false
	$StartBreak = $false
	# Stop Service
	
	try
	{
		$ServiceStop = Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Service WHERE Name = 'CcmExec'" | Invoke-WmiMethod -Name StopService -ErrorAction Stop
		
		switch ($ServiceStop.returnvalue)
		{
			0 {
				$toolstripstatuslabel1.Text = "$("Stop") action returned : The request was accepted."
			}
			
			1 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The request is not supported." }
			
			2 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The user did not have the necessary access." }
			
			3 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service cannot be stopped because other services that are running are dependent on it." }
			
			4 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The requested control code is not valid, or it is unacceptable to the service." }
			
			5 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The requested control code cannot be sent to the service because the state of the service (Win32_BaseService.State property) is equal to 0, 1, or 2." }
			
			6 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service has not been started." }
			
			7 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service did not respond to the start request in a timely fashion." }
			
			8 { $toolstripstatuslabel1.Text = "$("Stop") action returned : Unknown failure when starting the service." }
			
			9 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The directory path to the service executable file was not found." }
			
			10 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service is already running." }
			
			11 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The database to add a new service is locked." }
			
			12 { $toolstripstatuslabel1.Text = "$("Stop") action returned : A dependency this service relies on has been removed from the system." }
			
			13 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service failed to find the service needed from a dependent service." }
			
			14 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service has been disabled from the system." }
			
			15 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service does not have the correct authentication to run on the system." }
			
			16 { $toolstripstatuslabel1.Text = "$("Stop") action returned : This service is being removed from the system." }
			
			17 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service has no execution thread." }
			
			18 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service has circular dependencies when it starts." }
			
			19 { $toolstripstatuslabel1.Text = "$("Stop") action returned : A service is running under the same name." }
			
			20 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service name has invalid characters." }
			
			21 { $toolstripstatuslabel1.Text = "$("Stop") action returned : Invalid parameters have been passed to the service." }
			
			22 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The account under which this service runs is either invalid or lacks the permissions to run the service." }
			
			23 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service exists in the database of services available from the system." }
			
			24 { $toolstripstatuslabel1.Text = "$("Stop") action returned : The service is currently paused in the system." }
			
			Default { $toolstripstatuslabel1.Text = "$("Stop") action returned : Other error: $($ServiceStop.returnvalue)" }
		}
	}
	Catch
	{
		$toolstripstatuslabel1.Text = "Failed to initiate Stop command"
		break
	}
	do
	{
		$StopCount++
		$global:StopServiceState = $(Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Service WHERE Name = 'CcmExec'").State
		
		switch -regex ($StopServiceState)
		{
			"Stopped" {
				$StopBreak = $true
			}
			"Stop Pending" {
				$StopBreak = $false
				$toolstripstatuslabel1.Text = "Stop Pending"
			}
			"Fail" {
				$StopBreak = $true
			}
			default
			{
				$StopBreak = $true
			}
		}
		Start-Sleep -Seconds 1
	}
	while ($($StopBreak -eq $false) -and ($StopCount -le 30))
	#Start Service
	
	if ($StopServiceState -eq "Stopped")
	{
		try
		{
			$ServiceStart = Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Service WHERE Name = 'CcmExec'" | Invoke-WmiMethod -Name StartService -ErrorAction Stop
			
			switch ($ServiceStart.returnvalue)
			{
				0 {
					$toolstripstatuslabel1.Text = "$("Start") action returned : The request was accepted."
				}
				
				1 { $toolstripstatuslabel1.Text = "$("Start") action returned : The request is not supported." }
				
				2 { $toolstripstatuslabel1.Text = "$("Start") action returned : The user did not have the necessary access." }
				
				3 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service cannot be stopped because other services that are running are dependent on it." }
				
				4 { $toolstripstatuslabel1.Text = "$("Start") action returned : The requested control code is not valid, or it is unacceptable to the service." }
				
				5 { $toolstripstatuslabel1.Text = "$("Start") action returned : The requested control code cannot be sent to the service because the state of the service (Win32_BaseService.State property) is equal to 0, 1, or 2." }
				
				6 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service has not been started." }
				
				7 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service did not respond to the start request in a timely fashion." }
				
				8 { $toolstripstatuslabel1.Text = "$("Start") action returned : Unknown failure when starting the service." }
				
				9 { $toolstripstatuslabel1.Text = "$("Start") action returned : The directory path to the service executable file was not found." }
				
				10 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service is already running." }
				
				11 { $toolstripstatuslabel1.Text = "$("Start") action returned : The database to add a new service is locked." }
				
				12 { $toolstripstatuslabel1.Text = "$("Start") action returned : A dependency this service relies on has been removed from the system." }
				
				13 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service failed to find the service needed from a dependent service." }
				
				14 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service has been disabled from the system." }
				
				15 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service does not have the correct authentication to run on the system." }
				
				16 { $toolstripstatuslabel1.Text = "$("Start") action returned : This service is being removed from the system." }
				
				17 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service has no execution thread." }
				
				18 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service has circular dependencies when it starts." }
				
				19 { $toolstripstatuslabel1.Text = "$("Start") action returned : A service is running under the same name." }
				
				20 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service name has invalid characters." }
				
				21 { $toolstripstatuslabel1.Text = "$("Start") action returned : Invalid parameters have been passed to the service." }
				
				22 { $toolstripstatuslabel1.Text = "$("Start") action returned : The account under which this service runs is either invalid or lacks the permissions to run the service." }
				
				23 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service exists in the database of services available from the system." }
				
				24 { $toolstripstatuslabel1.Text = "$("Start") action returned : The service is currently paused in the system." }
				
				Default { $toolstripstatuslabel1.Text = "$("Start") action returned : Other error: $($ServiceStart.returnvalue)" }
			}
		}
		Catch
		{
			$toolstripstatuslabel1.Text = "Failed to initiate Start command"
			break
		}
		do
		{
			$StartCount++
			$StartServiceState = $(Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Service WHERE Name = 'CcmExec'").State
			
			switch -regex ($StartServiceState)
			{
				"Running" {
					$StartBreak = $true
				}
				"Start Pending" {
					$StartBreak = $false
					$toolstripstatuslabel1.Text = "Start Pending"
				}
				"Fail" {
					$StartBreak = $true
				}
				default
				{
					$StartBreak = $true
				}
			}
			Start-Sleep -Seconds 1
		}
		while ($($StartBreak -eq $false) -and ($StartCount -le 30))
		
		$toolstripstatuslabel1.Text = "CCMExec Service Succesfully Restarted"
	}
	else
	{
		$toolstripstatuslabel1.Text = "Failed to restart after stopping CCMExec Service"
	}
}

$buttonSoftwareupdateinstall_Click = {
	
	$ApplicationClass = [WmiClass]"root\ccm\clientSDK:CCM_SoftwareUpdatesManager"
	foreach ($a in $datagridview2.SelectedRows)
	{
		try
		{
			$AppName = $a.Cells[0].Value
			$Update = Get-WmiObject -ComputerName $ComputerName -Namespace "root\ccm\clientsdk" -Query "SELECT * FROM CCM_SoftwareUpdate WHERE Name = '$AppName'" -ErrorAction Stop
			
			$result = Invoke-WmiMethod -Class CCM_SoftwareUpdatesManager -Name InstallUpdates -ArgumentList ( ,$Update) -Namespace root\ccm\clientsdk -ComputerName $ComputerName -ErrorAction Stop
			if ($result.ReturnValue -eq 0)
			{
				$toolstripstatuslabel1.Text = "Sucessfully triggered update $($AppName) installation"
			}
			else
			{
				$toolstripstatuslabel1.Text = "Failed to trigger update installation. Error: $($result.ReturnValue)"
			}
		}
		catch
		{
			$toolstripstatuslabel1.Text = "Sucessfully triggered update installation. Error: $($_.Exception.Message)"
		}
	}
}

$buttonReboot_Click={
	try
	{
		$Wmi = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction
		
		$Wmi.psbase.Scope.Options.EnablePrivileges = $true
		if ($checkboxForce.Checked -eq $true)
		{
			$RetunCode = $Wmi.Win32ShutdownTracker(5, "$env:USERNAME Rebooting", 0, 6)
		}
		else
		{
			$RetunCode = $Wmi.Win32ShutdownTracker(5, "$env:USERNAME Rebooting", 0, 2)
		}
		switch -regex ($RetunCode.ReturnValue)
		{
			1191 {
				$statusstrip1.Text = "Cannot Reboot until all users logged off"
			}
			0 {
				$statusstrip1.Text = "$HostName rebooted."
			}
			Default { $statusstrip1.Text = "Something else done broke." }
		}
	}
	catch
	{
		$statusstrip1.Text = "Failed to invoke reboot command"
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>