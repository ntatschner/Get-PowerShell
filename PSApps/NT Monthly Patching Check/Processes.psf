<File version="3.1">
  <FileID>f2251f45-46d7-4519-b05d-50d2c092eed1</FileID>
  <Preview>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
vOpWjdyekLeuXBmZeeryT8jXVqfMjAw1943q7uiginPSlXWzUYHbd9TTVGWuy1Zb/7BG+W0DIiJy
UTNmAHCuCwxrZGTY+dr+/n9geEQjw37nTwuPjk1oYsJ+NoDZ1h8wQ8Hk985Ru7nd7YkJ3R4bcR5z
eGzceXf/sFnUA6Nj5usJjZr7GfIPa9zebmx0crsH142YgYPPGyAiIjc1owYAIiIi+mmaEQOAfTPg
8PAwERERveCm1uMZcwbA/lZAV1cXERERvaDsoj+19r70AeDbb7/V+vXr9atf/UqvvvqqXnnlFSIi
InrO2TX217/+tfPZO/ZTc1/6AGDNnz9fmzdvVlhYmK5cuUJERETPuevXrzsH2w0NDRodHZ0ZA8DC
hQsVFBSkqKgohYSEEBER0XMuPDxcv/3tb9XY2DizBoDt27crMjJSwcHBRERE9JyzZ9kZAIiIiFwW
AwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABER
kQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MA
ICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJy
YQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABE
REQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6M
AYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiI
yIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEA
EBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5
MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAi
IiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfG
AEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE
5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgA
iIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhc
GAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAR
EZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwmbsALBnzx4lJCQoOjqa
iIiInnNxcXF69dVX1dDQMHMGgPfff19vv/22NmzYoNWrVxMREdFzbu3atfr7v/97NTU1zYwBYHx8
XKGhoc6OrVmzxvmXiIiInn87duxQf3+/AoHAyx0A7A74fD7du3fPORMAAABeLLsO2/X4pQ0AXq/X
efCBgQEiIiL6ievr65PH4/nBOj3VCxkA7IPaqaOzs5OIiIheQnYd7urqenhG4Afrtem5DgDOnZoH
IyIiopffdOu07YUMAERERDSzYwAgIiJyYQwARERELuynHQB8PvmHR3Xnzh2NBobk+971fg2PDCvg
Dzz499HriIiI6Hn2kw4AgdEJDdWmavWqrcpqC+j2sLkPv9/5vIBhv0/ezi719/equalZXX0+5/LA
gzcwTL2ZIRB48LhTXzMoEBERPXUvbACYWrCnspeN3/9WFdeP66233tPhqHrd112NmqP9gUG/dLdD
R4L2KDqrVBnJ6arv9Ov26LAGfUMaGx3VyNioMyTYxx2x348G5Bscci6f2o/HH5OIiMjtPbo2P9oL
GQDsp//ZzwLo7e11/rX5/MO6N+JR8PUrigkL14ljl+Qd6NSZLR9rzvvztWHdev3m//wvfbTlqC5d
j9PN8kwd2/Ku3nn/E10pztH1w7u1eMEfNeftzxSc3aS0M7v04bz52n0oSb7xMQ0NDn7v8YiIiNyc
XRPtBwJNt07bnvsAYE/b208CbG9vdz6AwH4ioP03MDKu4fYCLXvv1/rwww/1q7c/0v4De7Rj90X1
9vWqOPSili/bpvjMdB0K2qlNa1dq3/k4tZRHa9m6dVo6f7G+iatQZfRxrd92RLs+/0h/XLNKXx2I
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
GhiXc0MiIiKa2fnMkb493f/ov/Zy+1F9wWFRTzYAzJ03rzzEbHzxSojzJwSJiIhodhYaHqVNm798
sgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAD8fP3FX/x/00FfXXwI1AkAAAAASUVORK5CYII=</Preview>
  <Form>QPTy1MN6jhIAACODCAAAAAAABADNWNtu2kAQfa/Uf7D8bCXBhJsESAFyU5MSgZs+Rmt7AtusvWh3HaBf31lj
WgjGFxBVhISwmTNndvZ4ZsftofsLPCW7X78YRnt1YajlDDrmeCkVBGc/aejzuTy74SJYfVtG2l+W
8QxCUh52Ls8u9Mcy+hFTkYBOCJEShFnGU+Qy6n2DpcPfIOy4jQapebV6pVW9hItmyzRCEiDzK/p7
EtwDKUGahjelzBdob/Z5qARn0ozDxYDRagZCLRPgVaT42CMMBjSAUAeDpnXLqFTb52vTPOgj98Hs
3iBTLqbPKIRqTH8joNGyLaN6aeeCdLJ6XPggxmrJNBVdgD+ghPFJLviRLGiAfD2+QCBhEnIh3/Hb
7G6lNBejl3Qr6CyJ8I76+TwOLJTZzeC4fsdkJcYPnPgfgnrR99rnsdUakq/HW8GjGWbj5JqcaCKX
L+wsPe5m5YF7RGEAZreC+rBr9Z287Nuxv4QFEIkE603LqDUK2DvEvQ99QA0V8Y7WY8Vn+wS3TwpX
nl74rhB27X9I6PNgholyGWjwCDA6QcOJ2XVElEqZL41epBQPTy4MN6ZxQAQ0JAqy5ZElEF2nWilL
3SeQD8SFkIlQaijF3ZKYrZRKMft468sFdcD2pzp5pjIiLK5ZPeK99TnjIsvDZkHCUu697eT0Jb69
XZQQeL4S36cV4wheBcjpEVJsNg4SY0J8ailelJBimZA+nRCT4AvJ8OPlJ+ydlWN6Z6VIq9punWkl
K6N12tVmqd5ZxP2BvXP/Mep/dc8BUQSPgP4zhfnJBeIj2QTJ3pEsRyQpJ3fG+ByTIBx+5fsjjG9/
tjPRA2Cg4AgHQ32qx6c9CvTcUbhibHgYgUQ9lg5Bzy6IS6hXEwx67QNjaQpKmWRi5B0QXIC8AzqZ
xmNN4ilxX8jT4eeZLREUwo0w3mHIliVyjalNVolFWj8wZfI8RoHEh9pkRowYQ3+ru8UcTPlcb8q1
EFyU2uI10uGcOXRWGnvtU4UV4d7TO1MOiks8IN6ku6MI7JTpO7uwpvX3o7vdWBEVyR4RJ69mMmZy
iTi43yF51U7NQuqT84+weMPTryvsgtNf1rbsOXQRf7n7BmBzzzYu1j9l9w8SkOZBjhIAAA==</Form>
  <Code><![CDATA[param
(
	[parameter(Mandatory = $true)]
	$ComputerName
)
$formProcesses_Load={
	
 	
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion

$buttonRefresh_Click={
	
	try
	{
		$statusbar1.Text = "Looking for Processes"
		$processesObj = Get-WmiObject -Class win32_Process -ComputerName $ComputerName
		$DataGridData = ConvertTo-DataTable $($processesObj | select ProcessName, Handle, ProcessID, @{ Name = 'Path'; Expression = { ($_ | select -expand Path | Get-ItemProperty).VersionInfo.FileName } })
		if ([System.String]::IsNullOrEmpty($processesObj) -eq $false)
		{
			Update-DataGridView -DataGridView $datagridview1 -Item $DataGridData
			$statusbar1.Text = "Found for $($processesObj.Count) processes"
		}
		else
		{
			$statusbar1.Text = "No processes found"
		}
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$statusbar1.Text = "Failed to find processes"
	}
	
}

$buttonTerminate_Click={
	
	foreach ($a in $datagridview1.SelectedRows)
	{
		$ServicePID = $a.Cells[2].Value
		try
		{
			$ServiceTerminate = Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Process WHERE ProcessID = '$($ServicePID)'" | Invoke-WmiMethod -Name Terminate -ErrorAction Stop

			switch ($ServiceTerminate.returnvalue)
			{
				0 {
					$statusbar1.Text = "$($a.Cells[0].Value) succesfully terminated"
					$datagridview1.Rows.Remove($a)
				}
				2 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Access Denied"}
				3 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Insufficient privilege"}
				8 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Unknown failure"}
				9 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: path not found"}
				21 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Invalid parameter"}
				Default { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Other error: $($ServiceTerminate.returnvalue)"}	
			}
		}
		Catch
		{
			$statusbar1.Text = "Failed to initiate termination command"
		}	
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>