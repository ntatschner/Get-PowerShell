<File version="3.1">
  <FileID>a620bf20-d135-4e76-94f8-ccdc5a70223d</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIUKSURBVHhe7f1VdBz5gib6zpo5b+e+3HPOfb/r
Ps1ad+6c7jlzpnm6e/feuzcXl+0yM8qWJdkCy2JmJouZmZmZmSlTmWJm+u4/QjKUy1Vlu6osyfn9
an2rFAmRkWkp/l9kRkb8ByIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiInop/j/+x//Y+n/8H/9768UL
F1p1dfVadXR0GYZhGIY5IZHGbj1d3db/+l//f63/y//yn1rF2C7lh/2n//Sf+v/ub/8WtvZOKKpq
Ru/oLHoYhmEYhjkx6R2bQ/vABGIT0/DlF1/g//G//q84HOa/3//+v/1vrTa2jmjun0RFxziKmwYZ
hmEY5tinqGkAJc1DKG8bQXn76M+UEXme0ryLmwdR2jqCMjH/nyPSvIoP5y0vt3isNy/Du0eaf0nL
MJqHZpGZV4K//qu/+vECcOH8+daCiiZUdipQKj1ZhmEYhjkBKWsRg2l9H6IzqhCWVIbw5PKflLCk
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
6gFEGT2CS0gNNvYW0NvVhWH1LNbWVzA9PoTOzi4MjE5ieX0Da8tzUI91IszZHCZuOVjY3cDq0jLm
51WYnl2Q3x1404IyDMMwDPPz5b0LwJqiBLdPXYa1ZwDCQjygb2CF3NIWFEcZ49a9O7huFYjm0Tn0
ZXjjvtYtnL1lh4K2cVRG3MHFc1/j159cwOmbd6BlF4f5lQmEGGsjq2cOW6sH7xwwDMMwDPPzRzpU
8MrKyvsXgHVFKW5+fhqPrexhceNrnH/oieryFHz613+LK9pa+ORXv4ZpcBH6mzJg9vA2/vybz/DY
wg6GRtYY31hBWogzjGz8YW+kj6T8RGjreGFkcRWr3CeAYRiGYX6RSAP/wMAAOjs73+9bAPJHAMP5
0NX1wtg2gD0lvGysYWFmhkuf3EJxRzcq87KQnhwI3U8eoaihEW4GBtA2NsPjpx5Yxh5yfSxgE1iM
0nw7/PoP5xBa3oz1jc13+iYBwzAMwzBvF2nwl76119fXh/a2tvcvAMsjRXik44o21RL2sYkSXxe4
e4Yh3EkbN67fxQ0Lb+RXNcDzygPc1bqP3//hAizii5Hmfh2nvrmAz7/4PWwSe7E2Fovff/IZSobX
sb2+8saFZhiGYRjm/fN8y7+3txcjIyPo6e15z+MALKxgaWEKo6MKzC4cfJ4wo1ZgYnIOC9PjqCgp
QX2/Emtb25gZ7kRFcTFqW7oxMbuEJXF9VWkJGrsHMD3cBk87PZg/S8PCzg5W3rDQDMMwDMO8f55v
+UuDf1dXl1wE2t73HQD5QEBi0F9bO/zev1QCVlbFgyyL/69ha2sLm4fXrayty9NbmxtYlY4eeHj9
1s4elgYq4OjujbqhRWyt8bN/hmEYhvk5I22gSwN+f3+/vOUv/Tw6Ooq+vt6fUAB+8tf1FrC0uiF9
hxCbq0tYECXizbdjGIZhGOZ9srq6go6ODrS3t6Onp0f8vw19vb1obmoU4/jyuxeAaVEAFkUBkL5C
wDAMwzDM8Y20pf88z88BIP1/Xlw3+7YFQFdXr319D5gVG+5Sa2AYhmEY5mRGGvx3AIRFxPx4ATh/
/kJHSGikfO5gqTEwDMMwDHNyExYRBT29xz9eAIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiDTDf/gP
/3+GgtA0tvOHFQAAAABJRU5ErkJggg==</Preview>
  <Form>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
Fp8LJIUS4rDxaLAHh+V/zcZ/7g6MInxrAAA=</Form>
  <Code><![CDATA[param (
	$ComputerName,
	$IPAddress
)
$SystemInfoForm_Load = {

	$SystemInfoForm.Text = "System Info for : $ComputerName"
	
	$HostNameTB.Text = $ComputerName
	$IPAddressTB.Text = (Test-Connection -Count 1 -ComputerName $ComputerName).ipv4address
	if (Test-Path -Path $env:windir\System32\logoff.exe)
	{
		$Global:Loggoff = $env:windir + '\System32'
	}
	else
	{
		$Global:Loggoff = $env:windir + '\Sysnative'
	}
	if (Test-Path -Path $env:windir\System32\qwinsta.exe)
	{
		$Global:Qwinsta = $env:windir + '\System32'
	}
	else
	{
		$global:Qwinsta = $env:windir + '\Sysnative'
	}
	
	$JobScript = {
		param ($Computer)
		
		$ObjectProps = @{
			"HostName" = $Computer;
			"IPAddress" = $IPAddress;
			"OperatingSystem" = "Couldn't Query";
			"ServicePack" = "Couldn't Query";
			"VersionNumber" = "Couldn't Query";
			"SystemDrive" = "Couldn't Query";
			"WindowsDirectory" = "Couldn't Query";
			"Architecture" = "Couldn't Query";
			"BuildDate" = "Couldn't Query";
			"RegisteredUser" = "Couldn't Query";
			"Disks" = "Couldn't Query";
			"UserSessions"	   = "Couldn't Query";
			"SCCMClientVersion" = "Couldn't Query"
		}
		
		try
		{
			$OSQuery = Get-WmiObject -ComputerName $Computer -Class Win32_OperatingSystem -ErrorAction Stop
			$DiskQuery = Get-WmiObject -ComputerName $Computer -Class Win32_LogicalDisk -Filter 'DriveType=3' -ErrorAction Stop
			$SCCMCV = Get-WmiObject -Namespace root\ccm -Class SMS_Client -ErrorAction Stop
			
			$sessions = & cmd.exe /c $Qwinsta\qwinsta.exe /server $Computer | ?{ $_ -notmatch '^ SESSIONNAME' } | %{
				$item = "" | Select "Active", "SessionName", "Username", "Id", "State", "Type", "Device"
				$item.Active = $_.Substring(0, 1) -match '>'
				$item.SessionName = $_.Substring(1, 18).Trim()
				$item.Username = $_.Substring(19, 20).Trim()
				$item.Id = $_.Substring(39, 9).Trim()
				$item.State = $_.Substring(48, 8).Trim()
				$item.Type = $_.Substring(56, 12).Trim()
				$item.Device = $_.Substring(68).Trim()
				$item
			}
			
			$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
			$obj.OperatingSystem = ($OSQuery.Name).split('|')[0]
			$obj.ServicePack = $OSQuery.ServicePackMajorVersion
			$obj.VersionNumber = $OSQuery.Version
			$obj.SystemDrive = $OSQuery.SystemDrive
			$obj.WindowsDirectory = $OSQuery.WindowsDirectory
			$obj.Architecture = $OSQuery.OSArchitecture
			$obj.BuildDate = $OSQuery.ConvertToDateTime($OSQuery.InstallDate)
			$obj.RegisteredUser = $OSQuery.RegisteredUser
			$obj.Disks = $DiskQuery
			$obj.UserSessions = $sessions
			$obj.SCCMClientVersion = $SCCMCV.ClientVersion
			
			Write-Output $obj
		}
		catch
		{
			$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
			Write-Output $obj
		}
	}
	
	$UpdateScript = {
		param ($Job)
		$SystemInfoStatusBar.Text = "Working.."
	}
	
	$CompleteScript = {
		param ($Job)
		
		$result = Receive-Job -Job $Job
		
		$OSTB.Text = $result.OperatingSystem
		$SPTB.Text = $result.ServicePack
		$VNTB.Text = $result.VersionNumber
		$SDTB.Text = $result.SystemDrive
		$WDTB.Text = $result.WindowsDirectory
		$ArchTB.Text = $result.Architecture
		$BDTB.Text = $result.BuildDate
		$RUTB.Text = $result.RegisteredUser
		$SystemInfoStatusBar.Text = "Complete"
		$tb_SCCM_Version.Text = $result.SCCMClientVersion
		
		foreach ($User in $result.UserSessions)
		{
			if ($User.Username.length -gt 3)
			{
				Load-ListBox -ListBox $UserListsyscont -Items ($User.Username + " " + $User.State + " " + $User.Id) -Append
			}
		}
		
		
		foreach ($Disk in $result.Disks)
		{
			$datagridview1.Rows.Add()
			$row = $datagridview1.Rows[$datagridview1.Rows.GetLastRow('None')]
			$row.Cells[0].Value = $Disk.Name
			$row.Cells[1].Value = $Disk.FileSystem
			$row.Cells[2].Value = $Disk.VolumeName
			$row.Cells[3].Value = $Disk.Description
			$row.Cells[4].Value = $Disk.Compressed
			$row.Cells[5].Value = $( "{0:N}" -f ($Disk.size / 1MB) )
			$row.Cells[6].Value = $( "{0:N}" -f ($Disk.FreeSpace / 1MB) )
			$row.Cells[7].Value = $( ("{0:P}" -f ($Disk.FreeSpace/$Disk.Size)) )
			$row.Cells[8].Value = $(("{0:P}" -f (($Disk.Size - $Disk.FreeSpace)/$Disk.Size)))

			
		}		
	}
	Add-JobTracker -ArgumentList $ComputerName -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompleteScript -Name $ComputerName
}

$jobTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	'Job' = $Job;
						'CompleteScript' = $CompletedScript;
						'UpdateScript' = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($psObject -ne $null) 
		{
			if($psObject.Job -ne $null)
			{
				if ($psObject.Job.State -eq 'Blocked')
                {
                    #Try to unblock the job
                    Receive-Job $psObject.Job | Out-Null
                }
                elseif($psObject.Job.State -ne 'Running')
				{				
					#Call the Complete Script Block
					if($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function Load-ListBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.

	.PARAMETER  ListBox
		The ListBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ListBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ListBox $listBox1 "Red" -Append
		Load-ListBox $listBox1 "White" -Append
		Load-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Load-ListBox $listBox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListBox]$ListBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$listBox.Items.Clear()	
	}
	
	if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)	
	}

	$listBox.DisplayMember = $DisplayMember	
}

function Load-ComboBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$ComboBox.Items.Clear()	
	}
	
	if($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$ComboBox.Items.Add($obj)	
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)	
	}

	$ComboBox.DisplayMember = $DisplayMember	
}

function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#endregion

$LogoffAllUser_Click={
	
	foreach ($User in $UserListsyscont.Items)
	{
		$Id = $User.ToString().Split(" ")[-1]
		$SystemInfoStatusBar.Text = "Logging off $($User.ToString().Split(" ")[0]) with Session Id $($User.ToString().Split(" ")[-1])"
		& cmd.exe /c %windir%\Sysnative\logoff.exe /Server $HostNameTB.Text $Id
		Start-Sleep -Seconds 1
		$SystemInfoStatusBar.Text = "Complete"
	}
	
	$SystemInfoStatusBar.Text = "Ready"
}

$EnableGB_CheckStateChanged={
	
	if ($SystemTasksgb.Enabled -eq $false)
	{
		$SystemTasksgb.Enabled = $true
	}
	else
	{
		$SystemTasksgb.Enabled = $false
	}
	
}

$Logoffselected_Click={
	
	foreach ($User in $UserListsyscont.CheckedItems)
	{
		$Id = $User.ToString().Split(" ")[-1]
		$SystemInfoStatusBar.Text = "Logging off $($User.ToString().Split(" ")[0]) with Session Id $($User.ToString().Split(" ")[-1])"
		& cmd.exe /c $Loggoff\logoff.exe /Server $HostNameTB.Text $Id
		Start-Sleep -Seconds 1
		$SystemInfoStatusBar.Text = "Complete"
	}
	
	$SystemInfoStatusBar.Text = "Ready"
	& $RefreshUsers_Click
}

$RefreshUsers_Click = {
	
	$UserListsyscont.Items.Clear()
	
		$sessions = & cmd.exe /c $Qwinsta\qwinsta.exe /server $HostNameTB.Text | ?{ $_ -notmatch '^ SESSIONNAME' } | %{
		$item = "" | Select "Active", "SessionName", "Username", "Id", "State", "Type", "Device"
		$item.Active = $_.Substring(0, 1) -match '>'
		$item.SessionName = $_.Substring(1, 18).Trim()
		$item.Username = $_.Substring(19, 20).Trim()
		$item.Id = $_.Substring(39, 9).Trim()
		$item.State = $_.Substring(48, 8).Trim()
		$item.Type = $_.Substring(56, 12).Trim()
		$item.Device = $_.Substring(68).Trim()
		$item
	}
	foreach ($User in $sessions)
	{
		if ($User.Username.length -gt 3)
		{
			Load-ListBox -ListBox $UserListsyscont -Items ($User.Username + " " + $User.State + " " + $User.Id) -Append
		}
	}
	
}

$RestartMachine_Click = {
	
	$Command = "Get-WmiObject -Class Win32_ComputerSystem -ComputerName $HostName"
	
	Show-RestartConfirmationScreen_psf -HostName $HostNameTB.Text -Action "Restart" -Command $Command -StatusBar $SystemInfoStatusBar
}

$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]

		if (Test-Path -Path "\\$($ComputerName)\$($datagridview1.Rows[$_.RowIndex].Cells[0].Value.ToString().Replace(':', ''))$")
		{
		Start-Process explorer.exe "\\$($ComputerName)\$($datagridview1.Rows[$_.RowIndex].Cells[0].Value.ToString().Replace(':', ''))$"
		}
		else
		{
		$SystemInfoStatusBar.Text = "Path \\$($ComputerName)\$($datagridview1.Rows[$_.RowIndex].Cells[0].Value.ToString().Replace(':', ''))$ unreachable"
		}
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>