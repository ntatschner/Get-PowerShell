<File version="2">
  <FileID>823bb3af-bc6e-4fdb-8fa2-e6b92f529f12</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFUYSURBVHhe7d3Xcxt5viX4idiYed8/YDb2cedt
IuZxH3YfZm9cM/f27a7uqurq8q0y8o6kKNF7I3rvvffee++9995b0FMkz/5+CUqipFQVJVGUdPOc
7k+JBBKJBAjgexIAwf/EMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzzacT9v/yX/1z+T//0j+W2tvbl1tZ25VZWtkRERPQJkTPc
2Ni4/P/4r/+1XMx26bfzn//z/9Z07doNFNe0oXt8Bb0Ta+iZWCUiIqJPSN/kGjpHFxAdn4L/9t/+
L5yO+dfnH/7hH8qLqlvROLiIstYRYfj0XyIiIvp0DKOifQxd46tweuz2+wXAzs6+vG9qTZxoFJUd
Y0RERPSpErO8WezQl1TUn68ADM/pUCFOWN05TkRE9B9WlVDTNYG6ninU9b6lnkllXcp61I4/p9qn
6+l+x/V069fzVOvwEvKLq36/ANja2pUPzW6KK2VCuTDPdE891zMrzClq5b/izF5YloiI6BMgh2V5
yzCS8xuRkFOPxNyGNxKfU4eMkjaxngmUNg0qh73VerLrkV3eoZSJwrq+03W8zXrqkFfdrVyup5ex
bWQZ+SXnLADyGYDqrkllBbVi4MsLVt3cg+qmLvFvN6oamlBRXYHy6ipU1TehtmNEFIFpZXmlRQln
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
6NO/3l/dMYHIlBLl5d2Q+ALl37CEQpQ1D4uhv6AsJ8nfsS8Se//FYnBnl3WIHUD94ZJcTr6UIJ9N
kOsIFacPEeuJSC5BlVi/PJ+ny8r3meVVdqGkcQhZoki0i+/l8bJgyPMoaRxAeGIhEnPFTGmV6yxE
gpirsjzI95g1ny7bMbaivJdAlpNu+VHA4jIOL+2JAlB7ngJgWz678UQM9DXlxN1iuMk900ZRABo7
xF53SweCU2rhFFaNgPhqsSfcgtb+CXElbuqXP3O6vumNFw9T0StO1yd+APrv18X366LBLIjzF1+L
dZxdtkd83yG2pVP+fYKzh4vz6RicRGJWOYo659E/o3a+6+I0osyMLuu/nlpDh2hG3VNiWdGSWkVr
kpf57Hpf1iOXHVtEVUsfIuKyEF8xgP55nXJc38wmOkcX0SJ+UPplz5xObJ8875Yh8cMR2943vaZc
xo7xVeUyycssn4Z6dp0TEdGl6JvdRJrYY249fa28R8yHbrEz1ise74cX917RJ2edMoPkTFnH4NwW
SusHlD33rNIOdIkB/PQ4uZxc/uV1SHL2yfN5uuzQ/DbyK7tR2jQsBng7+pX5+Xw9/WLHdmRpH0ML
YodWzBtlPQtiPXIuicshZ5eynjkdMkUBkM8G9J7O4NGVAxSJne3TMf/6yAIwt3ksBtOmsuKnlMEo
/8CA+Hdkbh3ji+sYnRcrFxsmB/WzZcUZ/u7Xat+fIa+wZ8e/9O8LxymHb6Jf7IU3tPYgp3YIvbPb
6Ht6nHL8i1+fPb3ytXK4LCFnljtd9tlpny4/u4XOoSmx116NlNIutL90Orm+5+s8PfzZv2eOO11W
dTkiIro0A2J+VLaOKU+b51Z0Ibf8zclnEORvmZWJ4S2/fpv15JR1IlMUiM6xVRTV9osh3v7m6xHL
Z4t15IivZXl4Op/GV5+g+LwFYF53gl7RNmTLkEVAMa37bcoyKp6e/j3rm9tVXudQO+5CzWxhaHFf
tK9dZairLkOkUd2kYWKH8BPVK2aYfEd+Y/8CGgfekDiNfI1ezkx5H2gaXFRf7veI9cj30sn1dE9u
qC9zHmI9nfKZBTGflJ1SMccn1o9EAag7XwFYEAWgXwy6PnGlTCxtY3Z5E9NLn6aZZR19ALMrW/SB
zK1ua9b82g59KOu7H8zCBVjc2MPS5v5bkafVr2cPiyrHn9ez9bzDtujtietlT3l2o08Uisn14/MV
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
Q6ys6t+IubupU35r4+m24UR/+zzY2sDSmv4NhHvidra5J64jcTvb3jkQP9ttLCwuYe/wSP/+kZMj
bG3oL6/yMzz97YrN1ec/7zfNywVAfPP8+nm6jbr1F7dxX2zj0Xm3Ub8uZRu39dv4/PrX/0Gr4/0d
LC6d/nyO5X1pQX+bFFkS1+vT52rkstLRwZ5yPzxcGcFjawc0Deuv4zfNK/cvJSdYnJ+Hbu8YXVWZ
iBZ792s6/XYf7W1heUVf4o8Pt5TLvS9ux4fbW9gXqzkWxy8u67dFvmFz7fRnIv+olv4yn/6RL/F4
8fx2sSXK0DFWlxexKq43+bN4el96srOJRXGbkjnZ31bO+5XNPUdeLQD6LIvreV23rWzLE3l5xO1W
/BiVrIjrXf4VUJln15G4Py0uLuovg9jqpaVl7B++xQaJsABo0wcvAFeuXEFnZ+fpdx935ID7FPIh
t/OVv2R4CXl1aHy6+VRuY+o5FqX77YqPzKd92c8feXt9oeR9BJF/34MFQHs+eAH49ddfkZ2djZ6e
no+efKaiu7tb9biPidxO+cEease9T7LItbW1qR73vnR0dKC9vV31uE/Rp3IbU9Xbp/zJ6F61487h
9y57b18f+np7VY/7lMjbq7zdqh33IcjrvLCwEImJiapDgv7j+uAF4ObNmwgKCkJ0dLTykZQfs09h
G6UPuZ2Xfd7y/D6Vn8t5/Ee6LG9KK5f9Y7zNJiQkKMNAbUjQf1wfRQGQG8AbHxER0eVhASAiItIg
FgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIi
DWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAi
ItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYA
IiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1i
ASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLS
IBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIi
Ig1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEg
IiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAW
ACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiIN
YgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi
0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAi
IiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIB
ICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIg
FgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIi
DWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAi
ItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYA
IiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1i
ASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLS
IBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIi
Ig1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEg
IiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAW
ACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiIN
YgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi
0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAi
IiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIB
ICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIg
FgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIi
DWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAi
ItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYA
IiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1i
ASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLS
IBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0qAPXgB+
/vlnhIaGIikpCYmJiURERHQJ5NyV8/fKlSunE/l5LqUAGBkZ4ccff1SKABEREV0eOX8NDQ1PJ/Lz
XEoBkDk4OMD+/j4RERFdIjl/1XJpBYBhGIZhmI8nLAAMwzAMo8GwADAMw3ykOXzyBFvb29je3nnF
657WfZNsi3X39/djaGgIg4ODH42BgYFXLt/MzAz6+vpUl/9Q5PbI7Xqavb09ZdvVlv2Q5M94d3f3
dCufhwWAYRjmI83a+gZ6esVAHBx+QV//EJpaOnB4+G6PubOzs6iurlaGVm9v70dBbktVVRXW1tZO
t1Kf5uZmdHR0KENX7XSXTW6H3B65XU+zvLz8UV6fcpsWFxdPt/J5WACYTzJyjyUhIQHp6ekvkL/2
MjU1dbqUPge7W8qDyYZuG8enh11kTo4Psbm+jp29HeXf/Sfv41wY5sXIIrCz8+pe3Ztkfn4e7e3t
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
Bl//4X/hX/7tC0Tl1iDW7SH+/Z//GTYewfBytoe3uyO++f4KrNz8kJ0cBc/QHOwdHapuKBEREb07
+dK7/CCgmZlp8e/6BT0DUJ8OO/ck7O7MI8zPBQ+v38SNRy5IiQ6Dr5sHvBwDEOhjh++uXIdndCnW
Z9vh4RmBuDA7fH3DEh1zmzjY0aluMBEREb277e1t5bcA2tpasbK6iqE5+ev87/QegAOMtRUjOLoI
xwCasmMRFBKEACdbWNn4oTC3AI/NTWDy4BZco9KQ4GuNX/7+A+wiS9CaE4DrDzywcwLlNQm1DSYi
IqJ3I4f/4OAghoeH0dfXezEF4NWPAl6DTraM+RlMzixg72AfS/NTmJicxubWDjbXljE1uwjdXA/s
zCxQ1jqFg32+/k9ERPQ+yKf9V8XAl8N/dHQUAwP9p38M6AIKgPw1QP3vFepfY5Bf67a29B8RLA6T
nw8gfzVQOVynU5qIbnUREzMzSlnY3FhXliMiIqKLI+evfM2/ra1N2fMfGBhAZ2fHxTwDMCMKgDwT
+Y7CN7KhLwmyNKgeT0RERO9GzFj5hj858FfEXr/c85fPBqytveNvAfSLEw6IFciVEBER0cdnSBJ7
+2fJw+UMl966AMj2QERERJ+WNy4AtrYOFVvHECc4UU5EREREn66VJ0B1fdvvF4Dbd+7V1zV1oKSi
TmkMRERE9Omqrm9FZHT87xcAhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmGYS89/+k//PxJ0HAVYtdwyAAAAAElFTkSu
QmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MainForm" children="Controls">
    <Property name="AutoScaleMode">Inherit</Property>
    <Property name="ClientSize">943, 709</Property>
    <Property name="HelpButton">True</Property>
    <Property name="MainMenuStrip">
      <Reference name="menustrip1" />
    </Property>
    <Property name="MinimumSize">959, 748</Property>
    <Property name="Name">MainForm</Property>
    <Property name="SizeGripStyle">Show</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">NT Monthly Patching Check</Property>
    <Event name="FormClosed">jobTracker_FormClosed</Event>
    <Event name="Load">fadeIn_Load</Event>
    <Object type="System.Windows.Forms.TabControl, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MainTabControl" children="Controls">
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">0, 28</Property>
      <Property name="Name">MainTabControl</Property>
      <Property name="SelectedIndex">0</Property>
      <Property name="Size">943, 653</Property>
      <Property name="TabIndex">2</Property>
      <Object type="System.Windows.Forms.TabPage, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ScanTab" children="Controls">
        <Property name="Location">4, 22</Property>
        <Property name="Name">ScanTab</Property>
        <Property name="Padding">3, 3, 3, 3</Property>
        <Property name="Size">935, 627</Property>
        <Property name="TabIndex">0</Property>
        <Property name="Text">Scan</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Object type="System.Windows.Forms.MaskedTextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="concurrentjobstb" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">628, 600</Property>
          <Property name="Mask">00</Property>
          <Property name="Name">concurrentjobstb</Property>
          <Property name="Size">33, 20</Property>
          <Property name="TabIndex">27</Property>
          <Property name="Text">15</Property>
          <Event name="TextChanged">concurrentjobstb_TextChanged</Event>
        </Object>
        <Object type="System.Windows.Forms.CheckBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ExtendedTests" children="Controls">
          <Property name="Anchor">Bottom, Left</Property>
          <Property name="Location">293, 598</Property>
          <Property name="Name">ExtendedTests</Property>
          <Property name="Size">104, 24</Property>
          <Property name="TabIndex">26</Property>
          <Property name="Text">Extended Tests</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SystemsLoadedLBL" children="Controls">
          <Property name="Anchor">Bottom, Left</Property>
          <Property name="Location">138, 598</Property>
          <Property name="Name">SystemsLoadedLBL</Property>
          <Property name="Size">149, 23</Property>
          <Property name="TabIndex">25</Property>
          <Property name="Text">Systems Loaded: 0</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="FileLoad" children="Controls">
          <Property name="Location">212, 3</Property>
          <Property name="Name">FileLoad</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">24</Property>
          <Property name="Text">Browse</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">FileLoad_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelConcurrentJobs" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">542, 598</Property>
          <Property name="Name">labelConcurrentJobs</Property>
          <Property name="Size">105, 23</Property>
          <Property name="TabIndex">22</Property>
          <Property name="Text">Concurrent Jobs:</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="StopButton" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">852, 598</Property>
          <Property name="Name">StopButton</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">21</Property>
          <Property name="Text">Stop</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">StopButton_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="CurrentlyProcessinglbl" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">436, 598</Property>
          <Property name="Name">CurrentlyProcessinglbl</Property>
          <Property name="Size">100, 23</Property>
          <Property name="TabIndex">20</Property>
          <Property name="Text">Jobs Running: 0</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Rescountlbl" children="Controls">
          <Property name="Anchor">Bottom, Left</Property>
          <Property name="Location">64, 598</Property>
          <Property name="Name">Rescountlbl</Property>
          <Property name="Size">68, 23</Property>
          <Property name="TabIndex">19</Property>
          <Property name="Text">0</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Clear" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">692, 598</Property>
          <Property name="Name">Clear</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">17</Property>
          <Property name="Text">Clear</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">Clear_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelResults" children="Controls">
          <Property name="Anchor">Bottom, Left</Property>
          <Property name="Location">9, 598</Property>
          <Property name="Name">labelResults</Property>
          <Property name="Size">49, 23</Property>
          <Property name="TabIndex">14</Property>
          <Property name="Text">Results:</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ScanButton" children="Controls">
          <Property name="Anchor">Bottom, Right</Property>
          <Property name="Location">773, 598</Property>
          <Property name="Name">ScanButton</Property>
          <Property name="Size">75, 23</Property>
          <Property name="TabIndex">8</Property>
          <Property name="Text">Scan All</Property>
          <Property name="UseVisualStyleBackColor">True</Property>
          <Event name="Click">ScanButton_Click</Event>
        </Object>
        <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelBrowseToATxtOrCSVFil" children="Controls">
          <Property name="Location">9, 3</Property>
          <Property name="Name">labelBrowseToATxtOrCSVFil</Property>
          <Property name="Size">197, 22</Property>
          <Property name="TabIndex">2</Property>
          <Property name="Text">Browse to a .Txt or .CSV file to load:</Property>
          <Property name="TextAlign">MiddleLeft</Property>
        </Object>
        <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="OutputDGV" children="Controls">
          <Property name="AllowUserToAddRows">False</Property>
          <Property name="AllowUserToResizeRows">False</Property>
          <Property name="Anchor">Top, Bottom, Left, Right</Property>
          <Property name="AutoSizeColumnsMode">AllCells</Property>
          <Property name="CellBorderStyle">Raised</Property>
          <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
          <Property name="Columns">
            <Item type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="HostNameDGV" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="IPAddressDGV" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="ICMP" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="RDP" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="LastUpdatedDGV" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="UpdatedTodayDGV" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="Updates" />
            </Item>
            <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
              <Reference name="Queried" />
            </Item>
          </Property>
          <Property name="ContextMenuStrip">
            <Reference name="DGVMenuStrip" />
          </Property>
          <Property name="Location">9, 28</Property>
          <Property name="Name">OutputDGV</Property>
          <Property name="ReadOnly">True</Property>
          <Property name="RowHeadersVisible">False</Property>
          <Property name="SelectionMode">FullRowSelect</Property>
          <Property name="ShowCellErrors">False</Property>
          <Property name="ShowEditingIcon">False</Property>
          <Property name="ShowRowErrors">False</Property>
          <Property name="Size">918, 564</Property>
          <Property name="StandardTab">True</Property>
          <Property name="TabIndex">0</Property>
          <Event name="CellContentClick">OutputDGV_CellContentClick</Event>
          <Event name="RowsAdded">OutputDGV_RowsAdded</Event>
          <Event name="RowsRemoved">OutputDGV_RowsRemoved</Event>
        </Object>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.StatusBar, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="statusbar1" children="Controls">
      <Property name="Anchor">Bottom, Left, Right</Property>
      <Property name="Dock">None</Property>
      <Property name="Location">0, 687</Property>
      <Property name="Name">statusbar1</Property>
      <Property name="Size">943, 22</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">Ready</Property>
    </Object>
    <Object type="System.Windows.Forms.MenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="menustrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="fileToolStripMenuItem" />
        </Item>
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="helpToolStripMenuItem" />
        </Item>
      </Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">menustrip1</Property>
      <Property name="Size">943, 24</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">menustrip1</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="fileToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="closeToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">fileToolStripMenuItem</Property>
    <Property name="Size">37, 20</Property>
    <Property name="Text">File</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="helpToolStripMenuItem">
    <Property name="Name">helpToolStripMenuItem</Property>
    <Property name="Size">44, 20</Property>
    <Property name="Text">Help</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="closeToolStripMenuItem">
    <Property name="Name">closeToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Close</Property>
    <Event name="Click">closeToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerFadeIn">
    <Event name="Tick">timerFadeIn_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Property name="Interval">50</Property>
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="DGVMenuStrip" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="checkselected" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="RDPmenuitem" />
      </Item>
    </Property>
    <Property name="Name">DGVMenuStrip</Property>
    <Property name="ShowImageMargin">False</Property>
    <Property name="Size">138, 48</Property>
    <Event name="ItemClicked">DGVMenuStrip_ItemClicked</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkselected">
    <Property name="Name">checkselected</Property>
    <Property name="Size">137, 22</Property>
    <Property name="Text">Check Selected</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="HostNameDGV">
    <Property name="HeaderText">HostName</Property>
    <Property name="LinkColor">Blue</Property>
    <Property name="Name">HostNameDGV</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Resizable">True</Property>
    <Property name="SortMode">Automatic</Property>
    <Property name="ToolTipText">Host Name of System</Property>
    <Property name="VisitedLinkColor">Blue</Property>
    <Property name="Width">82</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="IPAddressDGV">
    <Property name="HeaderText">IPAddress</Property>
    <Property name="Name">IPAddressDGV</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">80</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ICMP">
    <Property name="HeaderText">ICMP</Property>
    <Property name="Name">ICMP</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">58</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="RDP">
    <Property name="HeaderText">RDP</Property>
    <Property name="Name">RDP</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">55</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="LastUpdatedDGV">
    <Property name="HeaderText">LastRestarted</Property>
    <Property name="Name">LastUpdatedDGV</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">98</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="UpdatedTodayDGV">
    <Property name="HeaderText">RestartedRecently</Property>
    <Property name="Name">UpdatedTodayDGV</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">120</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Updates">
    <Property name="HeaderText">UpdatesInstalled</Property>
    <Property name="Name">Updates</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">111</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Queried">
    <Property name="HeaderText">Queried</Property>
    <Property name="Name">Queried</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">69</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="RDPmenuitem">
    <Property name="Name">RDPmenuitem</Property>
    <Property name="Size">137, 22</Property>
    <Property name="Text">Connect via RDP</Property>
  </Object>
  <Code><![CDATA[$MainForm_Load = {
	#TODO: Initialize Form Controls here
	Import-Module NetTCPIP
}

#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]
		$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]
		$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]
		$Table,
		[switch]
		$RetainColumns,
		[switch]
		$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}
#endregion

$fadeIn_Load = {
	#Start the Timer to Fade In
	$timerFadeIn.Start()
	$MainForm.Opacity = 0
}

$timerFadeIn_Tick = {
	#Can you see me now?
	if ($MainForm.Opacity -lt 1)
	{
		$MainForm.Opacity += 0.1
		
		if ($MainForm.Opacity -ge 1)
		{
			#Stop the timer once we are 100% visible
			$timerFadeIn.Stop()
		}
	}
}

$buttonBrowse_Click = {
	
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog1.FileName
	}
}

$ScanButton_Click = {
	$ScanButton.Enabled = $false
	$concurrentjobstb.Enabled = $false
	$Clear.Enabled = $fasle
	$Scanneditemscount = 0
	$global:StopJobs = $false

	foreach ($a in $OutputDGV.Rows)
	{
		$AddJobs = $true
		if ($StopJobs -eq $true)
		{
			break
		}
		while ($AddJobs -eq $true)
		{
			if ($JobTrackerList.Count -ge ($concurrentjobstb.Text -as [int]))
			{
				$AddJobs = $true
				[System.Windows.Forms.Application]::DoEvents()
			}
			else
			{
				$Scanneditemscount++
				$ComputerName = (($a.Cells[0]).Value)
				$ComputerName = $ComputerName.ToString().Trim()
				if ($ComputerName -gt "")
				{
					$SourceCellIndex = $a.Cells[0].Index
					
					$JobScript = {
						param ($Computer)
						
						$ObjectProps = @{
							"HostName" = $Computer;
							"IPAddress" = "N/A";
							"ICMP" = $false;
							"RDP" = "N/A";
							"LastRestarted" = "Could Not Query";
							"RestartedRecently" = "N/A";
							"UpdatesInstalled" = "Not Checking"
							"Queried" = "Yes"
						}
						
						
						$NetworkTest = Test-NetConnection -CommonTCPPort RDP -ComputerName $Computer -ErrorAction SilentlyContinue
						
						if ($NetworkTest.PingSucceeded)
						{
							try
							{
								$WMI = Get-WmiObject -Class win32_operatingsystem -ComputerName $Computer -ErrorAction 'Stop'
								if (((Get-Date).AddHours(-3)) -lt ($WMI.ConvertToDateTime($WMI.LastBootUpTime))) { $LastHour = "Yes" }
								Else { $LastHour = "No" }
								
								$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
								$obj.IPAddress = $NetworkTest.RemoteAddress
								$obj.ICMP = $NetworkTest.PingSucceeded
								$obj.LastRestarted = $WMI.ConvertToDateTime($WMI.LastBootUpTime)
								$obj.RestartedRecently = $LastHour
								$obj.RDP = $NetworkTest.TCPTestSucceeded
								
								Write-Output $obj
							}
							catch
							{
								$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
								$obj.IPAddress = $NetworkTest.RemoteAddress
								$obj.ICMP = $NetworkTest.PingSucceeded
								$obj.RDP = $NetworkTest.TCPTestSucceeded
								
								Write-Output $obj
							}
						}
						Else
						{
							$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
							
							Write-Output $obj
						}
					}
					
					$UpdateScript = {
						Param ($Job)
						$statusbar1.Text = 'Working...'
					}
					
					$CompletedScript = {
						param ($job)
						
						$results = Receive-Job -Job $Job
						
						$row = $OutputDGV.Rows | ? { $_.Cells[0].Value -eq $results.HostName }
						
						$row.Cells[1].Value = $results.IPAddress
						
						$row.Cells[2].Value = $results.ICMP
						if ($results.ICMP -eq "True")
						{
							$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightGreen
						}
						elseif ($results.ICMP -eq "False")
						{
							$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
						}
						elseif ($results.ICMP -eq "N/A")
						{
							$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
						}
						
						$row.Cells[3].Value = $results.RDP
						if ($results.RDP -eq "True")
						{
							$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightGreen
						}
						elseif ($results.RDP -eq "False")
						{
							$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightBlue
						}
						elseif ($results.RDP -eq "N/A")
						{
							$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightSalmon
						}
						$row.Cells[4].Value = $results.LastRestarted
						
						$row.Cells[5].Value = $results.RestartedRecently
						if ($results.RestartedRecently -eq "Yes")
						{
							$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightGreen
						}
						elseif ($results.RestartedRecently -eq "No")
						{
							$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
						}
						elseif ($results.RestartedRecently -eq "N/A")
						{
							$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
						}
						$row.Cells[6].Value = $results.UpdatesInstalled
						
						$row.Cells[7].Value = $results.Queried
						$row.Cells[7].Style.BackColor = 'LightGreen'
						
						$statusbar1.Text = "Completed"
						If ($JobTrackerList.Count -le 1)
						{
							$ScanButton.Enabled = $true
							$concurrentjobstb.Enabled = $true
							$Clear.Enabled = $true
							$statusbar1.Text = 'Ready'
						}
					}
					
					Add-JobTracker -Name ("$ComputerName" + (Get-Random -Minimum 1000 -Maximum 9999)) -ArgumentList $ComputerName -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompletedScript
				}
				$AddJobs = $false
				[System.Windows.Forms.Application]::DoEvents()
			}
		}
	}
	$statusbar1.Text = 'Ready'
}

$HeaderDropDown_SelectedValueChanged = {
	
	foreach ($a in $ContentDGV.Columns)
	{
		if ($a.Name -eq $HeaderDropDown.SelectedItem)
		{
			$global:ToAddColumn = $a.Index
		}
	}
	
}

$AddToListButton_Click = {
	
	$SourceColumnIndex = $ContentDGV.Columns[$HeaderDropDown.SelectedItem.ToString()].Index
	$DestinationColumnIndex = $ItemsToScanDGV.Columns["HostName"].Index
	
	if ($textboxFile.Text -like "*.txt")
	{
		foreach ($row in $ContentDGV.Rows)
		{
			$ItemsToScanDGV.Rows.Add($row.Cells[$SourceColumnIndex].Value)
		}
	}
	elseif ($textboxFile.Text -like "*.csv")
	{
		foreach ($row in $ContentDGV.Rows)
		{
			$ItemsToScanDGV.Rows.Add($row.Cells[$SourceColumnIndex].Value)
		}
	}
}

$Clear_Click = {
	
	$OutputDGV.Rows.Clear()
	
}

$closeToolStripMenuItem_Click = {
	
	$MainForm.Close()
	
}

$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	
	Stop-JobTracker
}

$timerJobTracker_Tick = {
	Update-JobTracker
	$CurrentlyProcessinglbl.Text = "Jobs Running: $($JobTrackerList.Count)"
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]
		$Name,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[ScriptBlock]
		$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]
		$CompletedScript,
		[ScriptBlock]
		$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if ($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			'Job' = $Job;
			'CompleteScript' = $CompletedScript;
			'UpdateScript' = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif ($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if ($psObject -ne $null)
		{
			if ($psObject.Job -ne $null)
			{
				if ($psObject.Job.State -eq 'Blocked')
				{
					#Try to unblock the job
					Receive-Job $psObject.Job | Out-Null
				}
				elseif ($psObject.Job.State -ne 'Running')
				{
					#Call the Complete Script Block
					if ($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif ($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if ($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start() #Resume the timer	
	}
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while ($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$StopButton_Click = {
	$global:StopJobs = $true
	Stop-JobTracker
	$CurrentlyProcessinglbl.Text = "Jobs Running: $($JobTrackerList.Count)"
	$ScanButton.Enabled = $true
	$concurrentjobstb.Enabled = $true
	$Clear.Enabled = $true
}

$FileLoad_Click={
	
	Call-FileManagement_psf -OutputDGV $OutputDGV
}

$OutputDGV_RowsAdded=[System.Windows.Forms.DataGridViewRowsAddedEventHandler]{
	
	$SystemsLoadedLBL.Text = "Systems Loaded: $($OutputDGV.RowCount)"
}
$OutputDGV_RowsRemoved=[System.Windows.Forms.DataGridViewRowsRemovedEventHandler]{
	
	$SystemsLoadedLBL.Text = "Systems Loaded: $($OutputDGV.RowCount)"
}
$DGVMenuStrip_ItemClicked=[System.Windows.Forms.ToolStripItemClickedEventHandler]{
	If ($_.ClickedItem -eq $checkselected)
	{
		$ScanButton.Enabled = $false
		$concurrentjobstb.Enabled = $false
		$Clear.Enabled = $false
		$global:StopJobs = $false
		$Scanneditemscount = 0
		foreach ($a in $OutputDGV.SelectedRows)
		{
			$AddJobs = $true
			if ($StopJobs -eq $true)
			{
				break
			}
			while ($AddJobs -eq $true)
			{
				if ($JobTrackerList.Count -ge ($concurrentjobstb.Text -as [int]))
				{
					$AddJobs = $true
					[System.Windows.Forms.Application]::DoEvents()
				}
				else
				{
					$Scanneditemscount++
					$ComputerName = (($a.Cells[0]).Value)
					$ComputerName = $ComputerName.ToString().Trim()
					if ($ComputerName -gt "")
					{
						$SourceCellIndex = $a.Cells[0].Index
						
						$JobScript = {
							param ($Computer)
							
							$ObjectProps = @{
								"HostName" = $Computer;
								"IPAddress" = "N/A";
								"ICMP" = $false;
								"RDP" = "N/A";
								"LastRestarted" = "Could Not Query";
								"RestartedRecently" = "N/A";
								"UpdatesInstalled" = "Not Checking"
								"Queried" = "Yes"
							}
							
							
							$NetworkTest = Test-NetConnection -CommonTCPPort RDP -ComputerName $Computer -ErrorAction SilentlyContinue
							
							if ($NetworkTest.PingSucceeded)
							{
								try
								{
									$WMI = Get-WmiObject -Class win32_operatingsystem -ComputerName $Computer -ErrorAction 'Stop'
									if (((Get-Date).AddHours(-1)) -lt ($WMI.ConvertToDateTime($WMI.LastBootUpTime))) { $LastHour = "Yes" }
									Else { $LastHour = "No" }
									
									$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
									$obj.IPAddress = $NetworkTest.RemoteAddress
									$obj.ICMP = $NetworkTest.PingSucceeded
									$obj.LastRestarted = $WMI.ConvertToDateTime($WMI.LastBootUpTime)
									$obj.RestartedRecently = $LastHour
									$obj.RDP = $NetworkTest.TCPTestSucceeded
									
									Write-Output $obj
								}
								catch
								{
									$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
									$obj.IPAddress = $NetworkTest.RemoteAddress
									$obj.ICMP = $NetworkTest.PingSucceeded
									$obj.RDP = $NetworkTest.TCPTestSucceeded
									
									Write-Output $obj
								}
							}
							Else
							{
								$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
								
								Write-Output $obj
							}
						}
						
						$UpdateScript = {
							Param ($Job)
							$statusbar1.Text = 'Working...'
						}
						
						$CompletedScript = {
							param ($job)
							
							$results = Receive-Job -Job $Job
							
							$row = $OutputDGV.Rows | ? { $_.Cells[0].Value -eq $results.HostName }
							
							$row.Cells[1].Value = $results.IPAddress
							
							$row.Cells[2].Value = $results.ICMP
							if ($results.ICMP -eq "True")
							{
								$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightGreen
							}
							elseif ($results.ICMP -eq "False")
							{
								$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
							}
							elseif ($results.ICMP -eq "N/A")
							{
								$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
							}
							
							$row.Cells[3].Value = $results.RDP
							if ($results.RDP -eq "True")
							{
								$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightGreen
							}
							elseif ($results.RDP -eq "False")
							{
								$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightBlue
							}
							elseif ($results.RDP -eq "N/A")
							{
								$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightSalmon
							}
							$row.Cells[4].Value = $results.LastRestarted
							
							$row.Cells[5].Value = $results.RestartedRecently
							if ($results.RestartedRecently -eq "Yes")
							{
								$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightGreen
							}
							elseif ($results.RestartedRecently -eq "No")
							{
								$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
							}
							elseif ($results.RestartedRecently -eq "N/A")
							{
								$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
							}
							$row.Cells[6].Value = $results.UpdatesInstalled
							
							$row.Cells[7].Value = $results.Queried
							$row.Cells[7].Style.BackColor = 'LightGreen'
							
							$statusbar1.Text = "Completed"
							If ($JobTrackerList.Count -le 1)
							{
								$ScanButton.Enabled = $true
								$concurrentjobstb.Enabled = $true
								$Clear.Enabled = $true
								$statusbar1.Text = 'Ready'
							}
						}
						
						Add-JobTracker -Name ("$ComputerName" + (Get-Random -Minimum 1000 -Maximum 9999)) -ArgumentList $ComputerName -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompletedScript
					}
					$AddJobs = $false
					[System.Windows.Forms.Application]::DoEvents()
				}
			}
		}
		
	}
	elseif ($_.ClickedItem -eq $RDPmenuitem)
	{
		foreach ($System in $OutputDGV.SelectedRows)
		{
			& mstsc /v:$($System.Cells[0].Value)
		}
	}
	
}

$OutputDGV_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	
	if ($_.ColumnIndex -eq 0)
	{
		foreach ($System in $OutputDGV.SelectedRows)
		{
			Call-SystemInfo_psf -ComputerName ($System.Cells[0]).Value -IPAddress ($System.Cells[1]).Value
		}
	}
}

$concurrentjobstb_TextChanged={
	
	if (($concurrentjobstb.Text -as [int]) -gt 25) 
	{
		$concurrentjobstb.Text = "25"
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>