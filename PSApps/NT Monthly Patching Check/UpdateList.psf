<File version="2.1">
  <FileID>1061e848-efc9-4d9b-9356-f0a1d8038d6f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADvXSURBVHhe7d1ncJ3nfff5ZJLMZCZv9kV2npnd
2Ty7k31iOy7ZKLblLsuSY8uWZXVZsholsUjsJNh7J9hJkWDvqEQnABZ0gOi9dxCdKKxoBPtvr+s+
oFgEUY2kSN7fr+czBE6/D47O9b/POYD/hoiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiMilpRmN//AP/9D4gx98v/H9YcMaP/hgOAAA
eAiMHDGi8ddPPNH493//941/+7d/22jW9Fpndf+8/u7v/q7jX/7lX/TqK6/Ie+UapWQWqqaxy1Hd
0AkAAB5QNU0nVVbTJP+gEL3zzjv6t//1v2R26DW4xH9uja+YxT84PFp51e1KLmpQcmE9AAB4CCQV
1CuvpkPJabkaMXy4/vEf//HS4Pp+577/ve81Llm2Uvlm8U8qqFOyYf8FAAAPPrtuJ+TXqqCuSwHB
4frZT3/6xQaAYcOGNSalF+hYcaNSzCQBAAAePon5dapu6tLMGbO+2AAwfPjwxuNtZ5RqB4Ci4wAA
4CFk3wpoPTVgBoDZX3wAaDQDgH0FINVcAAAAePjYzwM0d/Zp+vSZX3wAaGg7rbSSJjMENAAAcNel
lzYpq6JV2ZX3TmZ5i1nLGp3rs/9mljcPebq7xW5PetmNtfN+b+Pt7KsAzV12AJjxZQaAM+aGNzsX
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
Gj1MUTVXdG2A9/4BAO50ffG//rXd879kdozt1/bDf9euXfN8LuD+vAVgnLVDwHldunZZ/c6v9J1V
T/9F51f8es2N6hu4bF/Y93R5wNz4PrNn7+natSu60N/rXEbfhSueA80G2f8N9HfrTFOOtiyYonkb
D+ukmXD4FUAAgBvZ3/G3v+pnX+q3e/32PX/7dUFBgbP4HzlyRFFRUc5p79NbAPdCt3r7+3WmNUtL
X/q5nh2+Vjmdl3Wpf6jTAgDw6LMDQE5Ojvz8/Jz3+e0AsHfvXudlf7vnbxf/w4cPO28H3KdfA7yX
zurUyZM6c9YMBL38/wIAAGD39u0ib7+2L/fbr+2/9nv7tT3+nn8GwL4cb6eMe6nPTDn2d/6HOg4A
ADeyC7z9177U39N91vne87XnOPsXdpvvxQBgVbf1OO8vAACA+8fu2Vs3f3379/br2hN20b8HA4Bl
JwsAAPDguXnxt+7qAAAAAB4ODAAAALjQVxsAunpVdeK8c2YAAPDwKW/tU1fv1S8+ALz33vutZ3sv
63SfnMkBAAA8fE72XNWFq9K0adOvDS7xd+6FF16snTZtxiVzhkt2agAAAA+j6Zemz5h56dVXX+0f
XOKJiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIXNbf/M3/D9UMruHW1zymAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="UpdateMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">584, 362</Property>
    <Property name="Name">UpdateMain</Property>
    <Property name="ShowIcon">False</Property>
    <Property name="ShowInTaskbar">False</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Installed Updates</Property>
    <Event name="FormClosed">jobTracker_FormClosed</Event>
    <Event name="Load">UpdateMain_Load</Event>
    <Object type="System.Windows.Forms.StatusStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="statusstrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="Ready" />
        </Item>
      </Property>
      <Property name="Location">0, 340</Property>
      <Property name="Name">statusstrip1</Property>
      <Property name="Size">584, 22</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">statusstrip1</Property>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="AllowUserToResizeRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="AutoSizeColumnsMode">DisplayedCells</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Columns">
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="HotFixID" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="Caption" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="Description" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="InstalledBy" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="InstalledOn" />
        </Item>
      </Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="SelectionMode">FullRowSelect</Property>
      <Property name="ShowCellErrors">False</Property>
      <Property name="ShowEditingIcon">False</Property>
      <Property name="ShowRowErrors">False</Property>
      <Property name="Size">560, 325</Property>
      <Property name="TabIndex">2</Property>
      <Event name="CellContentClick">datagridviewResults_CellContentClick</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Ready">
    <Property name="Name">Ready</Property>
    <Property name="Size">39, 17</Property>
    <Property name="Text">Ready</Property>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="HotFixID">
    <Property name="HeaderText">HotFixID</Property>
    <Property name="Name">HotFixID</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="SortMode">NotSortable</Property>
    <Property name="Width">54</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Caption">
    <Property name="HeaderText">Caption</Property>
    <Property name="Name">Caption</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Resizable">True</Property>
    <Property name="Width">49</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Description">
    <Property name="HeaderText">Description</Property>
    <Property name="Name">Description</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="SortMode">NotSortable</Property>
    <Property name="Width">66</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="InstalledBy">
    <Property name="AutoSizeMode">AllCells</Property>
    <Property name="HeaderText">InstalledBy</Property>
    <Property name="Name">InstalledBy</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">83</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="InstalledOn">
    <Property name="AutoSizeMode">AllCells</Property>
    <Property name="HeaderText">InstalledOn</Property>
    <Property name="Name">InstalledOn</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">85</Property>
  </Object>
  <Code><![CDATA[param (
	$ComputerName,
	$Updates
)

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#endregion

$UpdateMain_Load={
	
	$UpdateMain.Text = "Installed Updates on : $ComputerName"

	if ($Updates -eq "Not Checking")
	{
		$JobScript = {
			param ($Computer)
			
			Get-WmiObject -ComputerName $Computer -Class Win32_QuickFixEngineering
			
		}
		
		$UpdateScript = {
			param ($Job)
			$Ready.Text = "Working.."
		}
		
		$CompleteScript = {
			param ($Job)
			
			$result = Receive-Job -Job $Job
			$RowCount = 0
			foreach ($a in $result)
			{
				$datagridviewResults.Rows.Add()
				$datagridviewResults.Rows[$RowCount].Cells[0].Value = $a.HotFixID
				$datagridviewResults.Rows[$RowCount].Cells[1].Value = $a.Caption
				$datagridviewResults.Rows[$RowCount].Cells[2].Value = $a.Description
				$datagridviewResults.Rows[$RowCount].Cells[3].Value = $a.InstalledBy
				$InstalledOn = [System.Convert]::ToDateTime($a.InstalledOn.ToString(), $([System.Globalization.CultureInfo]::GetCultureInfo("en-US")))
				$datagridviewResults.Rows[$RowCount].Cells[4].Value = $InstalledOn
				$RowCount++
			}
			$Ready.Text = "Complete"
		}
		Add-JobTracker -ArgumentList $ComputerName -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompleteScript -Name $ComputerName
		$Ready.Text = "Working"
	}
	Else
	{
		$RowCount = 0
		foreach ($a in $Updates)
		{	
			$datagridviewResults.Rows.Add()
			$datagridviewResults.Rows[$RowCount].Cells[0].Value = $a.HotFixID
			$datagridviewResults.Rows[$RowCount].Cells[1].Value = $a.Caption
			$datagridviewResults.Rows[$RowCount].Cells[2].Value = $a.Description
			$datagridviewResults.Rows[$RowCount].Cells[3].Value = $a.InstalledBy
			$InstalledOn = [System.Convert]::ToDateTime($a.InstalledOn.ToString(), $([System.Globalization.CultureInfo]::GetCultureInfo("en-US")))
			$datagridviewResults.Rows[$RowCount].Cells[4].Value = $InstalledOn
			$RowCount++
		}
	}
}

$jobTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	'Job' = $Job;
						'CompleteScript' = $CompletedScript;
						'UpdateScript' = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($psObject -ne $null) 
		{
			if($psObject.Job -ne $null)
			{
				if ($psObject.Job.State -eq 'Blocked')
                {
                    #Try to unblock the job
                    Receive-Job $psObject.Job | Out-Null
                }
                elseif($psObject.Job.State -ne 'Running')
				{				
					#Call the Complete Script Block
					if($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$datagridviewResults_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	if ($_.ColumnIndex -eq 1)
	{
		[System.Diagnostics.Process]::Start($datagridviewResults.Rows[$_.RowIndex].Cells[1].Value)
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>Microsoft.VisualBasic.Compatibility, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>