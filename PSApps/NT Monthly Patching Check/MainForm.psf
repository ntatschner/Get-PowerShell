<File version="3.1">
  <FileID>823bb3af-bc6e-4fdb-8fa2-e6b92f529f12</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAFW8SURBVHhe7b1nd9vouqbZv2BW/5GeD/0fur/N
mg8zq6f7zJk+3X322WdXnR0qV7mcsxWtnHNOVJaoHKlEUTkyK1FUzlmW73leULJlm7blKku2N+5r
rWsJJIEXIADiuV8QhP4dIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQoiu+ek//sf/
aAgJizJExiQYwiNjKaWUUt0adjYcFf/b/ITTx8SnGm7eumv49//+fzOc1vi387//h/9QW1rThtGZ
DQxPrWHYvUoppZTq2hGph332JVisi7DYPkAZX2tDm35RXDj9exF942q1WDxr7415vE0Zt9++jPG5
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
IUgva8H+xgomrU6tMYdtGKN2N/bV/eNdowi4eR+5jWYcq8dz01heXdfOGvhbGEoppZRevqpeqzsX
qq8BHDOLHxAAAm8hIaMUSeFPkZ1fgKjAEESFhSErNwePb/wb/t8//ICUrDykpCQj6N593A4IQYnB
gLjEZCxs7vMiQkoppfQTqn7+p26HrP5JkXN26eIBIPHRdZTUdSM1OhCpiYn401d/QkhYKJ7cv4eQ
qHgE3b2Nr/72CwoqaxEXHAJDbRN++td/QkZVN06eHfpdGEoppZRerqrnr4q/+n8IIyPDmFL/7+Bi
ASDBcHwCDHa3Y255FyszNnT39GHQ3Iqc4nLY7E7UlxUjOTMHI5OTqCvPQXJ2Caan7Xhy61f0uVex
v7Pld6EopZRSenmenfbX/u368LD2j5Lc8vhCASAqPtmg/h3MyfPnONjfxf7hkfZPHc7+UdbR8dGL
/yal/tvT2fDUuBkNph4cy4jqikNKKaWUXq37+weYn5/XTvurIKCK/9LyMqa8a+8PAAFBoTULazuw
T3m1qwYvpHte0sUKZhfWYZdhv+NQSiml9HJ1+y74c0mPX/X61d9pKf5DE673BwBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEkL9T/t2/+/8BKPMz1fQD4yoAAAAASUVORK5CYII=</Preview>
  <Form>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
A9SW4LDnegAA</Form>
  <Code><![CDATA[
$MainForm_Load = {
	

	
}

#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]
		$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]
		$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]
		$Table,
		[switch]
		$RetainColumns,
		[switch]
		$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}
#endregion

$fadeIn_Load = {
	#Start the Timer to Fade In
	$timerFadeIn.Start()
	$MainForm.Opacity = 0
	#AD
	try
	{
		Import-Module ActiveDirectory -ErrorAction Stop
		$buttonImportFromAD.Enabled = $true
	}
	catch
	{
		$buttonImportFromAD.Enabled = $false
	}
	# Net tools
	try
	{
		Import-Module NetTCPIP -ErrorAction Stop
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show("Couldn't find needed modules, breaking")
		exit
	}
	# SCCM
	try
	{
		$BaseConsolePath = $(Get-ItemProperty -Path HKLM:\SOFTWARE\WOW6432Node\Microsoft\ConfigMgr10\Setup\ | select -ExpandProperty "UI Installation Directory")
		if ([System.String]::IsNullOrEmpty($BaseConsolePath) -eq $false)
		{
			$ConsolePSDir = Join-Path -Path $BaseConsolePath -ChildPath "\bin"
			Import-Module $(Join-Path -Path $ConsolePSDir -ChildPath "ConfigurationManager.psd1") -Global -ErrorAction Stop
			
			if ([System.String]::IsNullOrEmpty($(Get-PSDrive -PSProvider CMSite).Name) -eq $false)
			{
				$SCCMPSAvail = $true
				cd $($(Get-PSDrive -PSProvider CMSite).Name + ':')
				$buttonImportFromSCCM.Enabled = $true
			}
			else
			{
				$SCCMPSAvail = $false
				$buttonImportFromSCCM.Enabled = $false
			}
		}
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show("Failed to import Config manager modules. Error: $($_.Exception.Message)")
	}
}

$timerFadeIn_Tick = {
	#Can you see me now?
	if ($MainForm.Opacity -lt 1)
	{
		$MainForm.Opacity += 0.1
		
		if ($MainForm.Opacity -ge 1)
		{
			#Stop the timer once we are 100% visible
			$timerFadeIn.Stop()
		}
	}

}

$buttonBrowse_Click = {
	
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog1.FileName
	}
}

$global:JobScript = {
	param ($Computer, $ExtTests,$Quick)
	
	$BlankDate = [DateTime]::MinValue
	$ObjectProps = @{
		"HostName" = $Computer;
		"IPAddress" = "N/A";
		"ICMP" = $false;
		"RDP" = "$False";
		"LastRestarted" = $BlankDate;
		"RestartedRecently" = "No";
		"UpdatesInstalled"  = "Not Checking";
		"Queried"		    = "Yes";
		"PendingReboot" = ""
	}
	
	$TestPing = Test-Connection -ComputerName $Computer -Count 1 -Quiet
	$NetworkTest = Test-NetConnection -CommonTCPPort RDP -ComputerName $Computer -ErrorAction SilentlyContinue
	
	if ($TestPing -and $Quick.Checked -ne $true)
	{
		try
		{
			$RebootPending = Invoke-WMIMethod -Class CCM_ClientUtilities -Namespace ROOT\ccm\ClientSDK -ComputerName $Computer -Name DetermineIfRebootPending -ErrorAction Stop
			$WMI = Get-WmiObject -Class win32_operatingsystem -ComputerName $Computer -ErrorAction 'Stop'
			if ($ExtTests.Checked)
			{
				$Updates = Get-WmiObject -Class win32_quickfixengineering -ComputerName $Computer -ErrorAction 'Stop'
			}
			if (((Get-Date).AddHours(-3)) -lt ($WMI.ConvertToDateTime($WMI.LastBootUpTime))) { $LastHour = "Yes" }
			Else { $LastHour = "No" }
			
			$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
			$obj.IPAddress = $NetworkTest.RemoteAddress
			$obj.ICMP = $TestPing
			$obj.LastRestarted = $WMI.ConvertToDateTime($WMI.LastBootUpTime)
			$obj.RestartedRecently = $LastHour
			$obj.RDP = $NetworkTest.TCPTestSucceeded
			$obj.PendingReboot = $RebootPending.RebootPending
			
			if ($ExtTests.Checked)
			{
				$obj.UpdatesInstalled = $Updates
			}
			Write-Output $obj
		}
		catch
		{
			switch -regex ($_.Exception)
			{
				"The RPC server is unavailable"
				{
					$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
					$obj.IPAddress = $NetworkTest.RemoteAddress
					$obj.ICMP = $TestPing.PingSucceeded
					$obj.RDP = $NetworkTest.TCPTestSucceeded
					$obj.UpdatesInstalled = "Not Checking"
					
					Write-Output $obj
				}
				Default
				{
					$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
					$obj.IPAddress = $NetworkTest.RemoteAddress
					$obj.ICMP = $TestPing
					$obj.RDP = $NetworkTest.TCPTestSucceeded
					
					Write-Output $obj
				}
			}
		}
	}
	elseif ($Quick.Checked -eq $true)
	{
		$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
		
		$obj.IPAddress = $NetworkTest.RemoteAddress
		$obj.ICMP = $TestPing
		$obj.LastRestarted = "Didn't Query"
		$obj.RestartedRecently = "Didn't Query"
		$obj.RDP = $NetworkTest.TCPTestSucceeded
		$obj.PendingReboot = "Didn't Query"
		
		Write-Output $obj
	}
	Else
	{
		$obj = New-Object System.Management.Automation.PSObject -Property $ObjectProps
		
		Write-Output $obj
	}
}

$global:UpdateScript = {
	Param ($Job)
	$statusbar1.Text = 'Working...'
}

$global:CompletedScript = {
	param ($job)
	
	$results = Receive-Job -Job $Job
	
	$row = $OutputDGV.Rows | ? { $_.Cells[0].Value -eq $results.HostName }
	
	$row.Cells[1].Value = $results.IPAddress
	
	$row.Cells[2].Value = $results.ICMP
	if ($results.ICMP -eq "True")
	{
		$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightGreen
	}
	elseif ($results.ICMP -eq "False")
	{
		$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
	}
	elseif ($results.ICMP -eq "N/A")
	{
		$row.Cells[2].Style.BackColor = [System.Drawing.Color]::LightSalmon
	}
	
	$row.Cells[3].Value = $results.RDP
	if ($results.RDP -eq "True")
	{
		$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightGreen
	}
	elseif ($results.RDP -eq "False")
	{
		$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightBlue
	}
	elseif ($results.RDP -eq "N/A")
	{
		$row.Cells[3].Style.BackColor = [System.Drawing.Color]::LightSalmon
	}
	$row.Cells[4].Value = $results.LastRestarted
	
	$row.Cells[5].Value = $results.RestartedRecently
	if ($results.RestartedRecently -eq "Yes")
	{
		$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightGreen
	}
	elseif ($results.RestartedRecently -eq "No")
	{
		$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
	}
	elseif ($results.RestartedRecently -eq "N/A")
	{
		$row.Cells[5].Style.BackColor = [System.Drawing.Color]::LightSalmon
	}
	
	if (($ExtendedTests.Checked) -and ($results.IPAddress -ne "N/A"))
	{
		$row.Cells[6].Value = $results.UpdatesInstalled.Count
		$UpdatesArrayItem = @{ }
		$UpdatesArrayItem.($results.HostName) = $results.UpdatesInstalled
		$global:UpdatesArray += $UpdatesArrayItem
	}
	else
	{
		$row.Cells[6].Value = $results.UpdatesInstalled
		$UpdatesArrayItem = @{ }
		$UpdatesArrayItem.($results.HostName) = $results.UpdatesInstalled
		$global:UpdatesArray += $UpdatesArrayItem
	}
	
	$row.Cells[7].Value = $results.Queried
	$row.Cells[7].Style.BackColor = 'LightGreen'
	
	$statusbar1.Text = "Completed"
	If ($JobTrackerList.Count -le 1)
	{
		$ScanButton.Enabled = $true
		$concurrentjobstb.Enabled = $true
		$Clear.Enabled = $true
		$ExtendedTests.Enabled = $true
		$statusbar1.Text = 'Ready'
	}
	$row.Cells[8].Value = $results.PendingReboot
}

$ScanButton_Click = {
	$ScanButton.Enabled = $false
	$concurrentjobstb.Enabled = $false
	$Clear.Enabled = $fasle
	$ExtendedTests.Enabled = $false
	$Scanneditemscount = 0
	$global:StopJobs = $false
	if (Get-Variable UpdatesArray)
	{
		foreach ($Row in $OutputDGV.Rows)
		{
			if ($UpdatesArray.ContainsKey($Row.Cells[0].Value) -eq $true)
			{
				$UpdatesArray.Remove($Row.Cells[0].Value)
			}
		}
	}
	else
	{
		$Global:UpdatesArray = @{ }
	}
	
	foreach ($a in $OutputDGV.Rows)
	{
		Clear-Variable -Name LastHour -ErrorAction SilentlyContinue
		$AddJobs = $true
		if ($StopJobs -eq $true)
		{
			break
		}
		while ($AddJobs -eq $true)
		{
			if ($JobTrackerList.Count -ge ($concurrentjobstb.Text -as [int]))
			{
				$AddJobs = $true
				[System.Windows.Forms.Application]::DoEvents()
			}
			else
			{
				$Scanneditemscount++
				$ComputerName = (($a.Cells[0]).Value)
				$ComputerName = $ComputerName.ToString().Trim()
				if ($ComputerName -gt "")
				{
					$SourceCellIndex = $a.Cells[0].Index
				
				Add-JobTracker -Name ("$ComputerName" + (Get-Random -Minimum 1000 -Maximum 9999)) -ArgumentList $ComputerName,$ExtendedTests,$checkboxQuickTest -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompletedScript
			}
			$AddJobs = $false
			[System.Windows.Forms.Application]::DoEvents()
		}
	}
	}
}

$Clear_Click = {
	
	$OutputDGV.Rows.Clear()
	
}

$closeToolStripMenuItem_Click = {
	
	$MainForm.Close()
	
}

$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	
	Stop-JobTracker
}

$timerJobTracker_Tick = {
	Update-JobTracker
	$CurrentlyProcessinglbl.Text = "Jobs Running: $($JobTrackerList.Count)"
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]
		$Name,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[ScriptBlock]
		$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]
		$CompletedScript,
		[ScriptBlock]
		$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if ($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			'Job' = $Job;
			'CompleteScript' = $CompletedScript;
			'UpdateScript' = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif ($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if ($psObject -ne $null)
		{
			if ($psObject.Job -ne $null)
			{
				if ($psObject.Job.State -eq 'Blocked')
				{
					#Try to unblock the job
					Receive-Job $psObject.Job | Out-Null
				}
				elseif ($psObject.Job.State -ne 'Running')
				{
					#Call the Complete Script Block
					if ($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif ($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if ($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start() #Resume the timer	
	}
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while ($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$StopButton_Click = {
	$global:StopJobs = $true
	Stop-JobTracker
	$CurrentlyProcessinglbl.Text = "Jobs Running: $($JobTrackerList.Count)"
	$ScanButton.Enabled = $true
	$concurrentjobstb.Enabled = $true
	$Clear.Enabled = $true
	$ExtendedTests.Enabled = $true
}

$FileLoad_Click = {
	
	Show-FileManagement_psf -OutputDGV $OutputDGV
}

$OutputDGV_RowsAdded = [System.Windows.Forms.DataGridViewRowsAddedEventHandler]{
	
	$SystemsLoadedLBL.Text = "Systems Loaded: $($OutputDGV.RowCount)"
}

$OutputDGV_RowsRemoved = [System.Windows.Forms.DataGridViewRowsRemovedEventHandler]{
	
	$SystemsLoadedLBL.Text = "Systems Loaded: $($OutputDGV.RowCount)"
}

$DGVMenuStrip_ItemClicked = [System.Windows.Forms.ToolStripItemClickedEventHandler]{
	If ($_.ClickedItem -eq $checkselected)
	{
		$ScanButton.Enabled = $false
		$concurrentjobstb.Enabled = $false
		$Clear.Enabled = $false
		$global:StopJobs = $false
		$Scanneditemscount = 0
		foreach ($a in $OutputDGV.SelectedRows)
		{
			$AddJobs = $true
			if ($StopJobs -eq $true)
			{
				break
			}
			while ($AddJobs -eq $true)
			{
				if ($JobTrackerList.Count -ge ($concurrentjobstb.Text -as [int]))
				{
					$AddJobs = $true
					[System.Windows.Forms.Application]::DoEvents()
				}
				else
				{
					$Scanneditemscount++
					$ComputerName = (($a.Cells[0]).Value)
					$ComputerName = $ComputerName.ToString().Trim()
					if ($ComputerName -gt "")
					{
						$SourceCellIndex = $a.Cells[0].Index
						
						Add-JobTracker -Name ("$ComputerName" + (Get-Random -Minimum 1000 -Maximum 9999)) -ArgumentList $ComputerName, $ExtendedTests -JobScript $JobScript -UpdateScript $UpdateScript -CompletedScript $CompletedScript
					}
					$AddJobs = $false
					[System.Windows.Forms.Application]::DoEvents()
				}
			}
		}
		
	}
	elseif ($_.ClickedItem -eq $RDPmenuitem)
	{
		foreach ($System in $OutputDGV.SelectedRows)
		{
			& mstsc /v:$($System.Cells[0].Value)
		}
	}
	elseif ($_.ClickedItem -eq $PasteMenuItem)
	{
		$ClipboardItems = [System.Windows.Forms.Clipboard]::GetText()
		#[System.Windows.Forms.MessageBox]::Show()
		$ClipboardItems = $ClipboardItems -split '\n'
		if ($ClipboardItems -ne $null)
		{
			foreach ($Item in $ClipboardItems)
			{
				$Item = [System.Convert]::ToString($Item)
				$Item = $Item.Trim()
				If ($Item -gt "")
				{
					IF ($OutputDGV.Rows.Count -eq 0)
					{
						$Row = 0
					}
					else
					{
						$Row = $OutputDGV.Rows.Count
						$Row++
					}
					$OutputDGV.Rows.Add()
					$OutputDGV.Rows[$OutputDGV.Rows.GetLastRow([system.Windows.Forms.DataGridViewElementStates]::None)].Cells[0].Value = $Item
					$OutputDGV.Rows[$OutputDGV.Rows.GetLastRow([system.Windows.Forms.DataGridViewElementStates]::None)].Cells[9].Value = "Actions"
					
				}
			}
		}
	}
	elseif ($_.ClickedItem -eq $Restartmenuitem)
	{
			
	}
	elseif ($_.ClickedItem -eq $PSRemotemenuitem)
	{
		foreach ($a in $OutputDGV.SelectedRows)
		{
			try
			{
				Start-Process "powershell.exe" -Args "PowerShell.exe", '-NoProfile', '-NoExit', "Enter-PsSession -ComputerName $($a.Cells[0].Value)"
			}
			Catch
			{
				[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
			}
			
		}
	}
}

$OutputDGV_CellContentClick = [System.Windows.Forms.DataGridViewCellEventHandler]{
	
	if ($_.ColumnIndex -eq 0)
	{
		foreach ($System in $OutputDGV.SelectedRows)
		{
			Show-SystemInfo_psf -ComputerName ($System.Cells[0]).Value -IPAddress ($System.Cells[1]).Value
		}
	}
	elseif ($_.ColumnIndex -eq 6)
	{
		foreach ($System in $OutputDGV.SelectedRows)
		{
			Show-UpdateList_psf -ComputerName ($System.Cells[0]).Value -Updates $UpdatesArray.item(($System.Cells[0]).Value)
		}
	}
	elseif ($_.ColumnIndex -eq 9)
	{
		if (Test-Connection -Quiet -ComputerName ($OutputDGV.Rows[$_.RowIndex].Cells[0]).Value)
		{
			Show-Triggers_psf -ComputerName ($OutputDGV.Rows[$_.RowIndex].Cells[0]).Value
		}
		else
		{
			$statusbar1.Text = ($OutputDGV.Rows[$_.RowIndex].Cells[0]).Value + " is offline."
			Start-Sleep -Milliseconds 750
			$statusbar1.Text = "Ready"
		}
	}
}

$concurrentjobstb_TextChanged = {
	
	if (($concurrentjobstb.Text -as [int]) -gt 25)
	{
		$concurrentjobstb.Text = "25"
	}
}

$AddManualButton_Click={
	
	$OutputDGV.Rows.Add($ManualAddTB.Text, $null, $null, $null, $null, $null, $null, $null,$null, "Actions")
	$ManualAddTB.Clear()
}

$OutputDGV_CellValueChanged=[System.Windows.Forms.DataGridViewCellEventHandler]{
	
	$CheckedCount = @()
	foreach ($a in $OutputDGV.Rows)
	{
		if ($a.Cells[7].Value -eq "Yes")
		{	
			$CheckedCount += $a
		}
	}
	
	$Rescountlbl.Text = $CheckedCount.Count
}

$ManualAddTB_MouseClick=[System.Windows.Forms.MouseEventHandler]{
	
	$ManualAddTB.SelectionStart = 0
	
}

$ManualAddTB_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
	
	if ($_.KeyChar -eq [System.Windows.Forms.Keys]::Enter)
	{
		& $AddManualButton_Click
	}
	elseif (($_.KeyChar -eq [System.Windows.Forms.Keys]::Control) -and ($_.KeyChar -eq 'v'))
	{
		$ManualAddTB.Paste()
	}
	
}

$Restartmenuitem_Click={
	
	Show-RestartConfirmationScreen_psf -HostName $($OutputDGV.SelectedRows) -Action "Restart" -Command $Command -StatusBar $statusbar1
}

$OutputDGV_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	
	if ($_.Control)
	{
		if ($_.KeyCode -eq 'V')
		{
			$ClipboardItems = [System.Windows.Forms.Clipboard]::GetText()
			#[System.Windows.Forms.MessageBox]::Show()
			$ClipboardItems = $ClipboardItems -split '\n'
			if ($ClipboardItems -ne $null)
			{
				foreach ($Item in $ClipboardItems)
				{
					$Item = [System.Convert]::ToString($Item)
					$Item = $Item.Trim()
					If ($Item -gt "")
					{
						IF ($OutputDGV.Rows.Count -eq 0)
						{
							$Row = 0
						}
						else
						{
							$Row = $OutputDGV.Rows.Count
							$Row++
						}
						$OutputDGV.Rows.Add()
						$OutputDGV.Rows[$OutputDGV.Rows.GetLastRow([system.Windows.Forms.DataGridViewElementStates]::None)].Cells[0].Value = $Item
						$OutputDGV.Rows[$OutputDGV.Rows.GetLastRow([system.Windows.Forms.DataGridViewElementStates]::None)].Cells[9].Value = "Actions"
					}
				}
			}
		}
		
	}
	
}

$buttonImportFromAD_Click={
	
	if ((Show-ADSearcher_psf -OutputDGV $OutputDGV) -eq 'OK')
	{

	}
}

$buttonImportFromSCCM_Click={
	
	if ((Show-ImportFromSCCM_psf -OutputDGV $OutputDGV) -eq 'OK')
	{
		
	}
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>