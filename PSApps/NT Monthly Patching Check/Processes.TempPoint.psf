<File version="3.1">
  <FileID>f2251f45-46d7-4519-b05d-50d2c092eed1</FileID>
  <Preview>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
whgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACI
iIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwY
AwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABER
kQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MA
ICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJy
YQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABE
REQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6M
AYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiI
yIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEA
EBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5
MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAi
IiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERubDnagA4fPiw
4uLiFBUVRURERE+RXU/nzJmj8vLy2T0AzJ8/X6+88ooWLVqkBQsWEBER0VNk19OXXnpJNTU1s3cA
GBwclMfj0ZUrV3Tp0iUiIiKagcLCwpyFv7+/f3YNAJ2dnc5J2c+Nj487jwQAAICZY9dZu+729PTM
ngHAnogdAuwjAURERPTz1dbWpqampkfW5MmeyQBgu337tjMEEBER0c+fHQC6urqmXZNtz2wAsI8C
TD4sQURERD9vk2vudGuy7ZkNAERERDR7YgAgIiJyYbNjAOjr19DQoHMy095OREREM9osGAD61Nfd
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</Preview>
  <Form>wVK31eQD6hEAACODCAAAAAAABADNWG1v2jAQ/j5p/yHK56gtobxJEKnQV61dK8i6j5WTXMGrEyPbKWS/fpcQ
NighOCCmCgmRcM8957snd3a6j94v8JV0vn4xjO7iwlDJFHrmKJEKwpOfNAr4TJ5ccxEuvi2j6C/L
eAYhKY965ydn6ccyBjFTsYBeBLEShFnGU+wx6n+DxOVvEPW8Vos0/Eaz1qmfw1m7YxoRCZH5Ff09
Ce6DlCBNw59QFgi0Nwc8UoIzaWbhYsBoNQWhkhx4ESs+8gmDSxpClAaDpk3LqNW7p0vTXdAHHoDp
XCPTTsyAUYjUiP5GQKtjW0b93N4J+o7fprO2xJ0YF+bKdErsr94xkNz4npPgA8FLeq97mlktIbtr
fSN4PO3z+dHrPU6JPD63y2q9mZV77hOFAZhODXNvN5obedmW/b+EGoi8vM22ZTRaGvYu8e6iAOam
o+MdrUeKT1FwhEnQAWRSuPDThW8KYdP+h4QBD6eYKI9BCh4CRidoNDYdV8SFlLul0Y+V4tHRheFl
NC6IkEZEQbk8ygSS9oBOwVK3CeQDsRYyF0oDpbjZbsqVUtOzz0pfLag9yl/o5JnKmLCRShj0if82
4IyLMg+rDQnbpP+2kdOX7PZ6U0Lg6UJ8n1aMQ3gVICcHSLHd2kuMOfGxpXhWQYpVQvp0QsyD15Lh
x8tPODtrh8zOms6oWh+dRS2rZHTa9Xal2anjfs/ZuX0b9b+m5yVR5EbQ4JnC7OgCCZBsjGTvSLZD
JAW7Ysb4DJMgXH4RBEOMb3u2S9GXwEDBAQ4eBeYdn/Y4TPf02h1jxcMQJOqxcgjpuQBxOfXidIBe
B8BYkYIKTgkZ8hYILkDeAh1PsiND7il3r+Vp//3Mmgi0cEOM9zFiSYVcY2rzVWKTTh+YKnkeoUCy
TW1+/ooZQ3+Lu3oOJnyWFuVKCC4qlXiJdDlnLp1Wxl4FVGFHuPPTylSD4hL3iDef7igCu+BkW95Y
i+b7wdNupIiKZZ+Io3czmTF5ROw975C8bhdmofDJ+UeoP/DSVwG25umvrCxbNl0kSDbfAKzWbOVi
+VM6fwDeiEZX6hEAAA==</Form>
  <Code><![CDATA[param
(
	[parameter(Mandatory = $true)]
	$ComputerName
)
$formProcesses_Load={
	
 	
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion

$buttonRefresh_Click={
	
	try
	{
		$statusbar1.Text = "Looking for Processes"
		$processesObj = Get-WmiObject -Class win32_Process -ComputerName $ComputerName
		$DataGridData = ConvertTo-DataTable $($processesObj | select ProcessName, Handle, ProcessID, @{ Name = 'Path'; Expression = { ($_ | select -expand Path | Get-ItemProperty).VersionInfo.FileName } })
		if ([System.String]::IsNullOrEmpty($processesObj) -eq $false)
		{
			Update-DataGridView -DataGridView $datagridview1 -Item $DataGridData
			$statusbar1.Text = "Found for $($processesObj.Count) processes"
		}
		else
		{
			$statusbar1.Text = "No processes found"
		}
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show($_.Exception.Message)
		$statusbar1.Text = "Failed to find processes"
	}
	
}

$buttonTerminate_Click={
	
	foreach ($a in $datagridview1.SelectedRows)
	{
		$ServicePID = $a.Cells[2].Value
		try
		{
			$ServiceTerminate = Get-WmiObject -ComputerName $ComputerName -Query "SELECT * FROM Win32_Process WHERE ProcessID = '$($ServicePID)'" | Invoke-WmiMethod -Name Terminate -ErrorAction Stop

			switch ($ServiceTerminate.returnvalue)
			{
				0 {
					$statusbar1.Text = "$($a.Cells[0].Value) succesfully terminated"
					$datagridview1.Rows.Remove($a)
				}
				2 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Access Denied"}
				3 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Insufficient privilege"}
				8 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Unknown failure"}
				9 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: path not found"}
				21 { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Invalid parameter"}
				Default { $statusbar1.Text = "$($a.Cells[0].Value) Failed to terminate: Other error: $($ServiceTerminate.returnvalue)"}	
			}
		}
		Catch
		{
			$statusbar1.Text = "Failed to initiate termination command"
		}	
	}
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints />
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>