<File version="3.1">
  <FileID>3bbf4d05-93d9-4f32-92ac-32f9df79620f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEAHSURBVHhe7d13cJVnnqf9mZqZqvnznardd2p2
wr47u9NdOz09PR3c3Q6dbOOcu9vtgAHbJBtswCabZHLOGQyYLCSUJYISyjnnnHPOEun73vcRsgEf
20BjG3iuy/UpzNHJ6Dz37zlB+gsiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIihxZjVPzN3/xNxX/+5w8r3n7zzYqxY8cBAIC7wITx
4yt++5vfVPz1X/91xV/+5V9WmDW92LW6f11/9Vd/1fAv//IvevmPf9SqNesVGZ+uoooml8LyRgAA
cIcqqmxWTlGljnp4afTo0frev/2bzA69rizxX1vFH83i7+kTqJTCep3LKNe59FIAAHAXiEgrVUpR
g87FJGv8uHH627/92/NX1vev7of/8R8Vy1asUapZ/CPSSnTOsH8CAIA7n123w1KLlVbSpGOePnrg
/vtvbAB48803KyJi0xSdWaFIM0kAAIC7T3hqiQormzR3zkc3NgCMGzeuoqy2TVF2AMgoAwAAdyH7
UkBNS78ZAObd+ABQYQYA+wxAlDkDAABw97HvB6hq7NHs2XNvfAAor21VTFalGQLKAQDALYjNrlRC
Xo0S87858bnVZr2ucHv59lmAqiY7AMy5mQGgzVzxKteZAgCAm2MX/5CEfH16MlJ7j4dpr0f47WfO
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
YgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABw
IAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAA
B2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAA
cCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAA
AAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAA
AHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEA
AAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgA
AABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgB
AAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEY
AAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByI
AQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCB
GAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAc
iAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAAHIgBAAAAB2IAAADA
gRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAAwIEYAAAAcCAGAAAA
HIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAAAByIAQAAAAdiAAAA
wIEYAAAAcCAGAAAAHIgBAAAAB2IAAADAgRgAAABwIAYAAAAciAEAAAAHYgAAAMCBGAAAAHAgBgAA
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
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREROSw
/uIv/n/ZAayRs1zf6AAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[param (
	$OutputDGV	
)

$formMain_Load={
	#TODO: Initialize Form Controls here
	
}

#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]
		$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]
		$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]
		$Table,
		[switch]
		$RetainColumns,
		[switch]
		$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}
#endregion

$buttonBrowseFile_Click={

	if($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog1.FileName
	}
}

$LoadButton_Click={
	
	if ($ColumnsDD.Items -gt $null)
	{
		$ColumnsDD.Items.Clear()
	}
	
	$FilecontentDGV.DataSource = $null
	$FilecontentDGV.Rows.Clear()
	
	if ($textboxFile.Text -like "*.csv")
	{
		
		Try
		{
			$CSVFile = Import-Csv -Path $textboxFile.Text
			Load-DataGridView -DataGridView $FilecontentDGV -DataMember "CSVData" -Item $CSVFile
			foreach ($b in $FilecontentDGV.Columns)
			{
				Load-ComboBox -ComboBox $ColumnsDD -Items $b.HeaderText -Append -DisplayMember "DDLHeader"
				$ColumnsDD.SelectedIndex = 0
			}
		}
		Catch [System.UnauthorizedAccessException]
		{
			[System.Windows.Forms.MessageBox]::Show($Error[0], "ERROR")
		}
		Catch
		{
			[System.Windows.Forms.MessageBox]::Show($Error[0], "ERROR")
		}
		
	}
	elseif ($textboxFile.Text -like "*.txt")
	{
		try
		{
			$TXTFile = Get-Content -Path $textboxFile.Text
			
			$BigArray = @()
			foreach ($a in $TXTFile)
			{
				$Obj = New-Object System.Object
				$Obj | Add-Member -MemberType NoteProperty -Name "HostName" -Value $a
				$BigArray += $Obj
			}
			Load-DataGridView -DataGridView $FilecontentDGV -DataMember "TxtData" -Item $BigArray
			foreach ($b in $FilecontentDGV.Columns)
			{
				Load-ComboBox -ComboBox $ColumnsDD -Items $b.HeaderText -Append -DisplayMember "DDLHeader"
				$ColumnsDD.SelectedIndex = 0
			}
			
		}
		Catch [System.UnauthorizedAccessException]
		{
			[System.Windows.Forms.MessageBox]::Show($Error[0], "ERROR")
		}
		Catch
		{
			[System.Windows.Forms.MessageBox]::Show($Error[0], "ERROR")
		}
	}
	$RowCountLBL.Text = "Systems to add: $($FilecontentDGV.RowCount)"
}

$AddButton_Click={
	
	$SourceColumnIndex = $FilecontentDGV.Columns[$ColumnsDD.SelectedItem.ToString()].Index
	$DestinationColumnIndex = $OutputDGV.Columns["HostName"].Index
	
	foreach ($Row in $FilecontentDGV.Rows)
	{
		$OutputDGV.Rows.Add($row.Cells[$SourceColumnIndex].Value, $null, $null, $null, $null, $null, $null, $null, "Actions")
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>